//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:54:09 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyzw
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy
// SV_VERTEXID              0   x           4   VERTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyz         4     NONE   float   xyz
// TEXCOORD                 8   xyzw        5     NONE   float   xyzw
// SV_POSITION              0   xyzw        6      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[6], immediateIndexed
dcl_constantbuffer cb12[16], immediateIndexed
dcl_constantbuffer cb1[24], dynamicIndexed
dcl_resource_buffer (float,float,float,float) t0
dcl_resource_buffer (uint,uint,uint,uint) t1
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xy
dcl_input_sgv v4.x, vertex_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_output_siv o6.xyzw, position
dcl_temps 10
umin r0.x, v4.x, cb1[4].w
ld_indexable(buffer)(float,float,float,float) r0.xyzw, r0.xxxx, t0.xyzw
mul r1.x, r0.x, cb0[1].x
mul r1.x, r1.x, cb0[0].x
mad r1.y, cb0[2].y, r0.x, cb0[2].x
add r1.y, r1.y, cb0[3].x
mad r1.z, cb0[4].w, r1.y, cb0[4].z
add r1.z, r1.z, l(0.250000)
round_ne r1.w, r1.z
add r1.z, -r1.w, r1.z
mad r1.w, |r1.z|, l(-16.000000), l(8.000000)
mul r1.z, r1.w, r1.z
mad r1.w, |r1.z|, l(0.225000), l(0.775000)
mul r1.z, r1.w, r1.z
mad r2.x, cb0[4].x, r1.z, cb0[4].y
mad r1.y, cb0[5].w, r1.y, cb0[5].z
add r1.y, r1.y, l(0.250000)
round_ne r1.z, r1.y
add r1.y, -r1.z, r1.y
mad r1.z, |r1.y|, l(-16.000000), l(8.000000)
mul r1.y, r1.z, r1.y
mad r1.z, |r1.y|, l(0.225000), l(0.775000)
mul r1.y, r1.z, r1.y
mad r2.y, cb0[5].x, r1.y, cb0[5].y
mov r2.z, l(0)
mul r1.y, v0.w, l(32767.099609)
ftoi r1.y, r1.y
imax r1.z, -r1.y, r1.y
ige r1.w, r1.z, l(2048)
ilt r2.w, r1.y, l(0)
ishl r3.x, v4.x, l(1)
movc r3.x, r2.w, r3.x, v4.x
ishl r1.z, r1.z, l(3)
iadd r1.z, r1.z, l(0xffffc000)
bfi r1.z, l(3), l(0), r3.x, r1.z
ld_indexable(buffer)(uint,uint,uint,uint) r3.xyzw, r1.zzzz, t1.xyzw
movc r1.y, r1.w, r3.x, r1.y
ishl r3.x, r1.y, l(1)
bfi r1.y, l(31), l(1), r1.y, l(1)
if_nz r1.w
  utof r3.zw, r3.zzzw
  mul r1.w, r3.z, l(0.00392156886)
  mov r4.x, cb1[r3.x + 8].w
  mov r4.y, cb1[r1.y + 8].w
  ishl r3.z, r3.y, l(1)
  bfi r3.y, l(31), l(1), r3.y, l(1)
  dp4 r4.z, cb1[r3.z + 8].xyzw, cb1[r3.x + 8].xyzw
  ge r4.z, r4.z, l(0.000000)
  movc r4.z, r4.z, l(0.00392156886), l(-0.00392156886)
  mul r3.w, r3.w, r4.z
  mul r5.xyz, r3.wwww, cb1[r3.z + 8].xyzx
  mul r6.xyz, r3.wwww, cb1[r3.y + 8].xyzx
  mul r7.x, r3.w, cb1[r3.z + 8].w
  mul r7.y, r3.w, cb1[r3.y + 8].w
  mad r5.xyz, r1.wwww, cb1[r3.x + 8].xyzx, r5.xyzx
  mad r3.yzw, r1.wwww, cb1[r1.y + 8].xxyz, r6.xxyz
  mad r4.xy, r1.wwww, r4.yxyy, r7.yxyy
  if_nz r2.w
    iadd r1.z, r1.z, l(1)
    ld_indexable(buffer)(uint,uint,uint,uint) r6.xyzw, r1.zzzz, t1.xyzw
    ishl r1.zw, r6.xxxy, l(0, 0, 1, 1)
    bfi r4.zw, l(0, 0, 31, 31), l(0, 0, 1, 1), r6.xxxy, l(0, 0, 1, 1)
    dp4 r2.w, cb1[r1.z + 8].xyzw, cb1[r3.x + 8].xyzw
    utof r6.xy, r6.zwzz
    ge r2.w, r2.w, l(0.000000)
    movc r2.w, r2.w, l(0.00392156886), l(-0.00392156886)
    mul r2.w, r2.w, r6.x
    mul r7.x, r2.w, cb1[r1.z + 8].w
    mul r7.y, r2.w, cb1[r4.z + 8].w
    mad r6.xzw, r2.wwww, cb1[r1.z + 8].xxyz, r5.xxyz
    mad r8.xyz, r2.wwww, cb1[r4.z + 8].xyzx, r3.yzwy
    add r7.xy, r4.yxyy, r7.xyxx
    dp4 r1.z, cb1[r1.w + 8].xyzw, cb1[r3.x + 8].xyzw
    ge r1.z, r1.z, l(0.000000)
    movc r1.z, r1.z, l(0.00392156886), l(-0.00392156886)
    mul r1.z, r1.z, r6.y
    mul r9.x, r1.z, cb1[r1.w + 8].w
    mul r9.y, r1.z, cb1[r4.w + 8].w
    mad r5.xyz, r1.zzzz, cb1[r1.w + 8].xyzx, r6.xzwx
    mad r3.yzw, r1.zzzz, cb1[r4.w + 8].xxyz, r8.xxyz
    add r4.xy, r7.yxyy, r9.yxyy
    mov r5.w, r4.y
  else
    mov r5.w, r4.y
  endif
  dp4 r1.z, r5.xyzw, r5.xyzw
  sqrt r1.z, r1.z
  div r6.xyz, r5.xyzx, r1.zzzz
  div r3.yzw, r3.yyzw, r1.zzzz
  mov r4.y, r5.w
  div r1.zw, r4.xxxy, r1.zzzz
  mov r6.w, r1.w
else
  mov r3.yzw, cb1[r1.y + 8].xxyz
  mov r6.xyzw, cb1[r3.x + 8].xyzw
  mov r1.z, cb1[r1.y + 8].w
endif
add r4.xyzw, r6.xyzw, r6.xyzw
mad r5.xyz, v0.xyzx, cb1[5].wwww, cb1[5].xyzx
mad r1.xyw, r1.xxxx, r2.xyxz, r5.xyxz
mul r2.xyz, r1.xywx, r6.yzxy
mad r2.xyz, r6.xyzx, r1.ywxy, -r2.xyzx
mad r2.xyz, r6.wwww, r1.wxyw, r2.xyzx
mad r5.xyz, -r4.zxyz, r2.zxyz, r1.xywx
mad r2.xyz, r4.yzxy, r2.xyzx, r5.xyzx
mad r2.xyz, -r4.zxyz, r3.zwyz, r2.xyzx
mad r2.xyz, r4.yzxy, r3.wyzw, r2.xyzx
mad r2.xyz, r4.wwww, r3.yzwy, r2.xyzx
mad r1.xyz, -r1.zzzz, r4.xyzx, r2.xyzx
add r1.xyz, r1.xyzx, cb12[15].xyzx
mul r2.xyzw, r1.yyyy, cb12[1].xyzw
mad r2.xyzw, cb12[0].xyzw, r1.xxxx, r2.xyzw
mad r2.xyzw, cb12[2].xyzw, r1.zzzz, r2.xyzw
add o6.xyzw, r2.xyzw, cb12[14].xyzw
add o4.xyz, r1.xyzx, cb12[7].xyzx
dp3 r1.x, v1.xyzx, v1.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, v1.xyzx
mul r2.xyz, r1.xyzx, r6.yzxy
mad r2.xyz, r6.xyzx, r1.yzxy, -r2.xyzx
mad r2.xyz, r6.wwww, r1.zxyz, r2.xyzx
mad r1.xyz, -r4.zxyz, r2.zxyz, r1.xyzx
mad r1.xyz, r4.yzxy, r2.xyzx, r1.xyzx
dp3 r2.x, v2.xyzx, v2.xyzx
rsq r2.x, r2.x
mul r2.xyz, r2.xxxx, v2.xyzx
mul r3.xyz, r2.xyzx, r6.yzxy
mad r3.xyz, r6.xyzx, r2.yzxy, -r3.xyzx
mad r3.xyz, r6.wwww, r2.zxyz, r3.xyzx
mad r2.xyz, -r4.zxyz, r3.zxyz, r2.xyzx
mad r2.xyz, r4.yzxy, r3.xyzx, r2.xyzx
mul r3.xyz, r1.zxyz, r2.yzxy
mad r3.xyz, r1.yzxy, r2.zxyz, -r3.xyzx
mul o2.xyz, r3.xyzx, v2.wwww
mad r3.xy, v3.xyxx, cb1[6].xyxx, cb1[6].zwzz
mul_sat r2.w, r1.z, cb1[7].z
add_sat o0.w, r2.w, cb1[7].w
mul r2.w, v1.w, l(32767.099609)
ftoi r2.w, r2.w
ishr r3.z, r2.w, l(3)
and r3.z, r3.z, l(4095)
and r2.w, r2.w, l(7)
itof r2.w, r2.w
add o2.w, r2.w, l(0.100000)
ld_indexable(buffer)(uint,uint,uint,uint) r4.xyzw, r3.zzzz, t1.xyzw
ishl r3.zw, r4.yyyw, l(0, 0, 8, 8)
or r3.zw, r3.zzzw, r4.xxxz
f16tof32 r3.zw, r3.zzzw
mul o3.zw, r3.zzzw, r3.xxxy
mov o0.xyz, r1.xyzx
mov o1.w, r1.w
mov o1.xyz, r2.xyzx
mov o3.xy, r3.xyxx
mov o5.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used

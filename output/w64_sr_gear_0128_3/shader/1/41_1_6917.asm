//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:53:55 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float
// TEXCOORD                 1   xyzw        1     NONE   float
// TEXCOORD                 2   xyzw        2     NONE   float
// TEXCOORD                 3   xyzw        3     NONE   float
// TEXCOORD                 4   xyzw        4     NONE   float
// TEXCOORD                 5   xyzw        5     NONE   float
// TEXCOORD                 6   xyzw        6     NONE   float
// TEXCOORD                 7   xyzw        7     NONE   float
// TEXCOORD                 8   xyzw        8     NONE   float
// TEXCOORD                 9   xyzw        9     NONE   float
// SV_VERTEXID              0   x          10   VERTID    uint   x
// SV_InstanceID            0   x          11   INSTID    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyz         1     NONE   float   xyz
// TEXCOORD                 2   xyz         2     NONE   float   xyz
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// TEXCOORD                 5   xyzw        5     NONE   float   xyzw
// TEXCOORD                 6   xyzw        6     NONE   float   xyzw
// TEXCOORD                 7   xyzw        7     NONE   float   xyzw
// TEXCOORD                 8   xyzw        8     NONE   float   xyzw
// TEXCOORD                 9   xyzw        9     NONE   float   xyzw
// TEXCOORD                10   xyzw       10     NONE   float   xyzw
// TEXCOORD                11   xyzw       11     NONE   float   xyzw
// SV_POSITION              0   xyzw       12      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[131], immediateIndexed
dcl_constantbuffer cb12[8], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_resource_buffer (float,float,float,float) t2
dcl_input_sgv v10.x, vertex_id
dcl_output o0.xyzw
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_output o9.xyzw
dcl_output o10.xyzw
dcl_output o11.xyzw
dcl_output_siv o12.xyzw, position
dcl_temps 10
dcl_indexableTemp x0[4], 4
itof r0.x, v10.x
add r0.x, r0.x, l(0.500000)
mad r0.x, r0.x, l(0.500000), l(-0.500000)
round_ne r0.x, r0.x
ftoi r0.y, r0.x
ishl r0.z, r0.y, l(1)
iadd r0.z, -r0.z, v10.x
imul null, r0.w, r0.y, l(10)
itof r0.w, r0.w
add r0.w, r0.w, cb0[36].x
add r1.xyzw, r0.wwww, l(2.000000, 3.000000, 6.000000, 5.000000)
ftou r1.xyzw, r1.xyzw
ld_indexable(buffer)(float,float,float,float) r1.x, r1.xxxx, t2.wxyz
ld_indexable(buffer)(float,float,float,float) r2.xyzw, r1.yyyy, t2.xyzw
ld_indexable(buffer)(float,float,float,float) r3.xyzw, r1.zzzz, t2.xyzw
ftou r1.y, r0.w
ld_indexable(buffer)(float,float,float,float) o3.xyzw, r1.yyyy, t2.xyzw
ld_indexable(buffer)(float,float,float,float) r1.yzw, r1.wwww, t2.wxyz
add r4.xyzw, r0.wwww, l(7.000000, 8.000000, 1.000000, 9.000000)
ftou r4.xyzw, r4.xyzw
ld_indexable(buffer)(float,float,float,float) r5.xyzw, r4.xxxx, t2.xyzw
ld_indexable(buffer)(float,float,float,float) r6.xyzw, r4.yyyy, t2.xyzw
ld_indexable(buffer)(float,float,float,float) o4.xyzw, r4.zzzz, t2.xyzw
ld_indexable(buffer)(float,float,float,float) r4.xy, r4.wwww, t2.xyzw
mov x0[0].y, l(0)
mov x0[1].y, l(1.000000)
mov x0[2].y, l(0)
mov x0[3].y, l(1.000000)
mul r7.xyz, r2.yyyy, cb1[1].xyzx
mad r7.xyz, cb1[0].xyzx, r2.xxxx, r7.xyzx
mad r7.xyz, cb1[2].xyzx, r2.zzzz, r7.xyzx
add r7.xyz, r7.xyzx, cb1[3].xyzx
lt r0.w, l(1.000000), cb0[127].x
if_nz r0.w
  ilt r0.w, r0.y, l(0)
  if_nz r0.w
    add r0.w, l(3.000000), cb0[36].x
    ftou r0.w, r0.w
    ld_indexable(buffer)(float,float,float,float) r8.xyz, r0.wwww, t2.xyzw
  else
    add r0.w, l(-1.000000), cb0[127].x
    add r0.x, -r0.w, r0.x
    lt r0.x, |r0.x|, l(0.001000)
    if_nz r0.x
      iadd r0.x, r0.y, l(-1)
      itof r0.x, r0.x
      mad r0.x, r0.x, cb0[37].x, cb0[36].x
      add r0.x, r0.x, l(3.000000)
      ftou r0.x, r0.x
      ld_indexable(buffer)(float,float,float,float) r9.xyz, r0.xxxx, t2.xyzw
      mad r8.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), -r9.xyzx
    else
      iadd r0.x, r0.y, l(1)
      itof r0.x, r0.x
      mad r0.x, r0.x, cb0[37].x, cb0[36].x
      add r0.x, r0.x, l(3.000000)
      ftou r0.x, r0.x
      ld_indexable(buffer)(float,float,float,float) r8.xyz, r0.xxxx, t2.xyzw
    endif
  endif
else
  mov r8.xyz, l(0,0,0,0)
endif
mul r0.xyw, r8.yyyy, cb1[1].zxzy
mad r0.xyw, cb1[0].zxzy, r8.xxxx, r0.xyxw
mad r0.xyw, cb1[2].zxzy, r8.zzzz, r0.xyxw
add r0.xyw, r0.xyxw, cb1[3].zxzy
add r0.xyw, -r7.zxzy, r0.xyxw
dp3 r2.x, r0.xywx, r0.xywx
sqrt r2.x, r2.x
lt r2.x, l(0.000010), r2.x
movc r0.xyw, r2.xxxx, r0.xyxw, l(0,1.000000,0,0)
dp3 r2.x, r0.xywx, r0.xywx
rsq r2.x, r2.x
mul r2.xyz, r0.ywxy, r2.xxxx
add r8.xyz, -r7.xyzx, cb12[7].xyzx
mul r9.xyz, r0.xywx, r8.yzxy
mad r0.xyw, r0.wxwy, r8.zxzy, -r9.xyxz
dp3 r4.z, r0.xywx, r0.xywx
rsq r4.z, r4.z
mul r0.xyw, r0.xyxw, r4.zzzz
mul r0.xyw, r6.wwww, r0.xyxw
itof r4.z, r0.z
lt r4.z, r4.z, l(0.500000)
movc r0.xyw, r4.zzzz, -r0.xyxw, r0.xyxw
add r0.xyw, r0.xyxw, r7.xyxz
dp3 r4.z, r2.xyzx, r8.xyzx
mad r7.xyz, -r4.zzzz, r2.xyzx, r8.xyzx
dp3 r4.z, r7.xyzx, r7.xyzx
rsq r4.z, r4.z
mul o1.xyz, r4.zzzz, r7.xyzx
dp3 r4.z, r8.xyzx, r8.xyzx
rsq r4.w, r4.z
mul r7.xyz, r4.wwww, r8.xyzx
dp3 r2.x, r7.xyzx, r2.xyzx
mul r2.y, l(0.0174532942), cb0[120].x
add r2.z, cb0[120].x, cb0[121].x
mul r2.z, r2.z, l(0.0174532942)
sincos null, r2.yz, r2.yyzy
add r2.x, -r2.y, |r2.x|
add r2.y, -r2.y, r2.z
div_sat r2.x, r2.x, r2.y
mov o0.y, x0[r0.z + 0].y
mul r7.xyzw, r0.yyyy, cb12[1].xyzw
mad r7.xyzw, cb12[0].xyzw, r0.xxxx, r7.xyzw
mad r7.xyzw, cb12[2].xyzw, r0.wwww, r7.xyzw
add r7.xyzw, r7.xyzw, cb12[3].xyzw
sqrt r0.z, r4.z
mad r2.y, r0.z, l(4.000000), l(-2.000000)
add r0.z, -r0.z, l(10000.000000)
min_sat r0.z, r0.z, r2.y
mul r0.z, r2.x, r0.z
mul r0.z, r0.z, cb0[15].y
mul r0.z, r0.z, cb0[130].x
lt r2.x, l(0.999000), r2.w
movc o0.z, r2.x, l(0), r0.z
add o2.xyz, -r0.xywx, cb12[7].xyzx
mov o0.w, r7.w
mov o0.x, r1.x
mov o5.xyzw, r1.yzwx
mov o6.xyz, r3.xyzx
mov o6.w, l(0)
mov o7.xyz, r5.xyzx
mov o7.w, r3.w
mov o8.xy, l(0,0,0,0)
mov o8.zw, r6.xxxy
mov o9.xyzw, l(0,0,0,0)
mov o10.xz, l(0,0,0,0)
mov o10.y, r5.w
mov o10.w, r6.z
mov o11.x, l(0)
mov o11.y, r6.w
mov o11.zw, r4.xxxy
mov o12.xyzw, r7.xyzw
ret
// Approximately 0 instruction slots used

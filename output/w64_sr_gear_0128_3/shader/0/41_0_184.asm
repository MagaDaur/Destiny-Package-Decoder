//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:54:14 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[19], immediateIndexed
dcl_constantbuffer cb13[5], immediateIndexed
dcl_constantbuffer cb12[13], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 8
mul r0.xy, v0.xyxx, cb12[12].zwzz
mul r0.zw, r0.xxxy, cb12[12].xxxy
ftoi r1.xy, r0.zwzz
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyww, t1.yzxw
mul r2.xyzw, v0.yyyy, cb0[4].xyzw
mad r2.xyzw, cb0[3].xyzw, v0.xxxx, r2.xyzw
mad r2.xyzw, cb0[5].xyzw, r0.zzzz, r2.xyzw
add r2.xyzw, r2.xyzw, cb0[6].xyzw
div r2.xyz, r2.xyzx, r2.wwww
add r3.xyz, -r2.xyzx, cb0[7].xyzx
dp3 r0.z, r3.xyzx, r3.xyzx
sqrt r0.z, r0.z
mad_sat r0.w, r0.z, cb0[12].x, cb0[12].y
mul r0.w, r0.w, r0.w
lt r2.w, l(0.000100), r0.w
if_nz r2.w
  ld_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyzw, t0.xyzw
  mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  sample_indexable(texture2d)(float,float,float,float) r4.xyz, r0.xyxx, t2.xyzw, s0
  dp3 r0.x, r1.xyzx, r1.xyzx
  sqrt r0.x, r0.x
  mad r0.y, r0.x, l(4.000000), l(-3.000000)
  div r1.xyz, r1.xyzx, r0.xxxx
  add_sat r0.x, r4.y, r4.y
  mul r1.w, r4.z, l(1.250000)
  mov_sat r1.w, r1.w
  mul r0.x, r0.x, r0.x
  max r0.x, r0.x, l(0.000100)
  log r0.x, r0.x
  mul r0.x, r0.x, cb0[18].x
  exp r0.x, r0.x
  div r3.xyz, r3.xyzx, r0.zzzz
  dp3 r0.z, r2.xyzx, r2.xyzx
  rsq r0.z, r0.z
  mul r4.yzw, r0.zzzz, r2.xxyz
  dp3 r2.w, r1.xyzx, -r4.yzwy
  add r3.w, r2.w, r2.w
  mad r5.xyz, r1.xyzx, r3.wwww, r4.yzwy
  add r6.xyz, -r2.xyzx, cb0[9].xyzx
  dp3 r3.w, r6.xyzx, r5.xyzx
  mad r5.xyz, r3.wwww, r5.xyzx, -r6.xyzx
  dp3 r3.w, r5.xyzx, r5.xyzx
  sqrt r3.w, r3.w
  div_sat r3.w, cb0[8].x, r3.w
  mad r5.xyz, r5.xyzx, r3.wwww, r6.xyzx
  dp3 r3.w, r5.xyzx, r5.xyzx
  sqrt r3.w, r3.w
  div r5.xyz, r5.xyzx, r3.wwww
  add r5.w, -r0.y, l(1.000000)
  max r5.w, r5.w, l(0.010000)
  div r3.w, cb0[8].x, r3.w
  add_sat r3.w, r3.w, r3.w
  div r3.w, r5.w, r3.w
  add r3.w, r5.w, r3.w
  mul r3.w, r3.w, r3.w
  min r3.w, r3.w, l(1.000000)
  dp3_sat r5.w, r1.xyzx, r3.xyzx
  min r6.x, r1.w, l(0.200000)
  add r6.x, r5.w, r6.x
  min r6.x, r6.x, l(1.000000)
  mad r6.yzw, -r2.xxyz, r0.zzzz, r3.xxyz
  dp3 r7.x, r6.yzwy, r6.yzwy
  rsq r7.x, r7.x
  mul r6.yzw, r6.yyzw, r7.xxxx
  add r2.w, |r2.w|, l(0.000010)
  dp3_sat r6.y, r3.xyzx, r6.yzwy
  mul r7.x, r0.y, l(-0.500000)
  mad r0.y, -r0.y, l(0.900000), l(1.000000)
  mul r6.y, r6.y, r6.y
  dp2 r6.y, r6.yyyy, r0.yyyy
  add r5.w, -r5.w, l(1.000000)
  add r6.y, r6.y, l(-0.500000)
  mul r6.z, r5.w, r5.w
  mul r6.z, r6.z, r6.z
  mul r5.w, r5.w, r6.z
  mad r5.w, r6.y, r5.w, l(1.000000)
  add r6.z, -r2.w, l(1.000000)
  mul r6.w, r6.z, r6.z
  mul r6.w, r6.w, r6.w
  mul r6.z, r6.w, r6.z
  mad r6.y, r6.y, r6.z, l(1.000000)
  mul r5.w, r5.w, r6.y
  lt r6.y, l(0.000100), r1.w
  dp3_sat r6.z, r3.xyzx, -r1.xyzx
  dp3 r6.w, -r4.yzwy, -r4.yzwy
  rsq r6.w, r6.w
  mul r4.yzw, -r4.yyzw, r6.wwww
  dp3_sat r3.x, r3.xyzx, -r4.yzwy
  log r3.x, r3.x
  mul r3.x, r3.x, cb13[4].y
  exp r3.x, r3.x
  mad_sat r3.x, r6.z, cb13[4].x, r3.x
  mul r1.w, r1.w, r3.x
  and r1.w, r1.w, r6.y
  mul r3.x, r6.x, r5.w
  mul r1.w, r1.w, l(0.318309873)
  mad r1.w, r3.x, l(0.318309873), r1.w
  mul r3.xyz, r1.wwww, cb0[11].xyzx
  dp3_sat r1.w, r1.xyzx, r5.xyzx
  mad r2.xyz, -r2.xyzx, r0.zzzz, r5.xyzx
  dp3 r0.z, r2.xyzx, r2.xyzx
  rsq r0.z, r0.z
  mul r2.xyz, r0.zzzz, r2.xyzx
  dp3 r0.z, r1.xyzx, r2.xyzx
  dp3_sat r1.x, r5.xyzx, r2.xyzx
  mul r0.y, r0.y, r0.y
  mul r0.y, r0.y, r0.y
  add r1.x, -r1.x, l(1.000000)
  mad r1.y, r4.x, l(0.840000), l(0.040000)
  mul r1.z, r1.x, r1.x
  mul r1.z, r1.z, r1.z
  mul r2.x, r1.z, r1.x
  mad r1.x, -r1.x, r1.z, l(1.000000)
  div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
  mad r1.x, r1.y, r2.x, r1.x
  mov_sat r7.x, r7.x
  mad r1.y, -r2.w, r0.y, r2.w
  mad r1.y, r1.y, r2.w, r0.y
  sqrt r1.y, r1.y
  add r1.y, r1.y, r1.w
  mad r1.z, -r1.w, r0.y, r1.w
  mad r1.z, r1.z, r1.w, r0.y
  sqrt r1.z, r1.z
  add r1.z, r1.z, r2.w
  add r1.y, r1.z, r1.y
  div r1.y, l(0.500000), r1.y
  add r1.y, r7.x, r1.y
  min r1.y, r1.y, l(1.000000)
  mad r1.z, r0.z, r0.y, -r0.z
  mad r0.z, r1.z, r0.z, l(1.000000)
  mul r0.z, r0.z, r0.z
  div r0.y, r0.y, r0.z
  mul r0.y, r0.y, r1.x
  mul r0.y, r1.y, r0.y
  mul r0.y, r1.w, r0.y
  mul r0.y, r0.y, l(0.318309873)
  mul r1.xyz, r0.yyyy, cb0[11].xyzx
  mul r1.xyz, r3.wwww, r1.xyzx
  mul r2.xyz, r0.xxxx, r3.xyzx
  mul r0.xyz, r0.xxxx, r1.xyzx
  mul r0.w, r0.w, cb0[15].x
  mul r1.xyz, r0.wwww, r2.xyzx
  mul r0.xyz, r0.wwww, r0.xyzx
  mul r1.xyz, r1.xyzx, cb0[16].xxxx
  mul r0.xyz, r0.xyzx, cb0[16].yyyy
else
  mov r1.xyz, l(0,0,0,0)
  mov r0.xyz, l(0,0,0,0)
endif
mov o0.xyz, r1.xyzx
mov o0.w, l(0)
mov o1.xyz, r0.xyzx
mov o1.w, l(0)
ret
// Approximately 0 instruction slots used

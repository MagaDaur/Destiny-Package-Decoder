//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:54:06 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float      w
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float
// POSITION                 0   xyz         3     NONE   float   xyz
// POSITION                 1   xy          4     NONE   float   xy
// POSITION                 2   xyz         5     NONE   float   xyz
// SV_VERTEXID              0   x           6   VERTID    uint
// SV_InstanceID            0   x           7   INSTID    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyz         1     NONE   float   xyz
// TEXCOORD                 2   xyz         2     NONE   float   xyz
// SV_POSITION              0   xyzw        3      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[106], immediateIndexed
dcl_constantbuffer cb12[8], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_input v0.w
dcl_input v1.xyzw
dcl_input v3.xyz
dcl_input v4.xy
dcl_input v5.xyz
dcl_output o0.xyzw
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output_siv o3.xyzw, position
dcl_temps 7
mov r0.w, l(0)
mad r1.xyz, v3.xyzx, cb1[4].xyzx, cb1[5].xyzx
mul r1.xyz, r1.xyzx, l(0.023000, 0.023000, 0.100000, 0.000000)
mul r1.w, v1.w, l(0.500000)
sincos r2.x, r3.x, r1.w
mul r0.xyz, r1.xyzx, r3.xxxx
mul r2.xyz, r2.xxxx, l(1.000000, 0.000000, 0.000000, 0.000000)
mul r4.xyzw, r1.yzxx, -r2.zxzx
mad r1.xyz, -r1.zxyz, -r2.zzxz, r4.xyzx
mov r1.w, -r4.w
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyz, r0.yzxy, r2.zxzz
mad r1.xyz, r2.zzxz, r0.zxyz, -r1.xyzx
mad r0.xyz, r3.xxxx, r0.xyzx, r1.xyzx
mad r0.xyz, r0.wwww, r2.xzzx, r0.xyzx
add r0.xyz, r0.xyzx, v1.xyzx
mul r1.xyz, r0.yyyy, cb1[1].xyzx
mad r0.xyw, cb1[0].xyxz, r0.xxxx, r1.xyxz
mad r0.xyz, cb1[2].xyzx, r0.zzzz, r0.xywx
add r0.xyz, r0.xyzx, cb1[3].xyzx
mul r1.xyzw, r0.yyyy, cb12[1].xyzw
mad r1.xyzw, cb12[0].xyzw, r0.xxxx, r1.xyzw
mad r1.xyzw, cb12[2].xyzw, r0.zzzz, r1.xyzw
add o2.xyz, -r0.xyzx, cb12[7].xyzx
add r0.xyzw, r1.xyzw, cb12[3].xyzw
mov o0.w, r0.w
mul r1.x, cb0[11].y, cb0[105].x
lt r1.y, l(0.999000), v0.w
movc r1.x, r1.y, l(0), r1.x
mov o0.z, r1.x
lt r1.x, r1.x, l(0.000001)
mad o0.xy, v4.xyxx, cb1[6].xyxx, cb1[6].zwzz
mov r4.xyz, v5.xyzx
mov r4.w, l(0)
mul r5.xyzw, -r2.zxzx, v5.yzxx
mad r6.xyz, -v5.zxyz, -r2.zzxz, r5.xyzx
mov r6.w, -r5.w
mad r4.xyzw, r3.xxxx, r4.xyzw, r6.xyzw
mul r1.yzw, r2.zzxz, r4.yyzx
mad r1.yzw, r2.zzzx, r4.zzxy, -r1.yyzw
mad r1.yzw, r3.xxxx, r4.xxyz, r1.yyzw
mad r1.yzw, r4.wwww, r2.xxyz, r1.yyzw
mul r2.xyz, r1.zzzz, cb1[1].xyzx
mad r2.xyz, cb1[0].xyzx, r1.yyyy, r2.xyzx
mad o1.xyz, cb1[2].xyzx, r1.wwww, r2.xyzx
lt r1.y, cb0[13].x, l(0.000001)
or r1.x, r1.y, r1.x
movc o3.xyzw, r1.xxxx, l(10000.000000,10000.000000,-10000.000000,1.000000), r0.xyzw
ret
// Approximately 0 instruction slots used

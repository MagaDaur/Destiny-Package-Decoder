//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:54:09 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float
// TANGENT                  0   xyzw        2     NONE   float
// TEXCOORD                 0   xy          3     NONE   float   xy
// SV_VERTEXID              0   x           4   VERTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy
// TEXCOORD                 1   xyz         1     NONE   float
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[6], immediateIndexed
dcl_constantbuffer cb12[16], immediateIndexed
dcl_constantbuffer cb1[24], dynamicIndexed
dcl_resource_buffer (float,float,float,float) t0
dcl_resource_buffer (uint,uint,uint,uint) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input v0.xyzw
dcl_input v3.xy
dcl_input_sgv v4.x, vertex_id
dcl_output o0.xy
dcl_output_siv o2.xyzw, position
dcl_temps 9
umin r0.x, v4.x, cb1[4].w
ld_indexable(buffer)(float,float,float,float) r0.x, r0.xxxx, t0.xyzw
mul r0.y, r0.x, cb0[1].x
mul r0.y, r0.y, cb0[0].x
mad r0.x, cb0[2].y, r0.x, cb0[2].x
add r0.x, r0.x, cb0[3].x
mad r0.z, cb0[4].w, r0.x, cb0[4].z
add r0.z, r0.z, l(0.250000)
round_ne r0.w, r0.z
add r0.z, -r0.w, r0.z
mad r0.w, |r0.z|, l(-16.000000), l(8.000000)
mul r0.z, r0.w, r0.z
mad r0.w, |r0.z|, l(0.225000), l(0.775000)
mul r0.z, r0.w, r0.z
mad r1.x, cb0[4].x, r0.z, cb0[4].y
mad r0.x, cb0[5].w, r0.x, cb0[5].z
add r0.x, r0.x, l(0.250000)
round_ne r0.z, r0.x
add r0.x, -r0.z, r0.x
mad r0.z, |r0.x|, l(-16.000000), l(8.000000)
mul r0.x, r0.z, r0.x
mad r0.z, |r0.x|, l(0.225000), l(0.775000)
mul r0.x, r0.z, r0.x
mad r1.y, cb0[5].x, r0.x, cb0[5].y
mov r1.z, l(0)
mul r0.x, v0.w, l(32767.099609)
ftoi r0.x, r0.x
imax r0.z, -r0.x, r0.x
ige r0.w, r0.z, l(2048)
ilt r1.w, r0.x, l(0)
ishl r2.x, v4.x, l(1)
movc r2.x, r1.w, r2.x, v4.x
ishl r0.z, r0.z, l(3)
iadd r0.z, r0.z, l(0xffffc000)
bfi r0.z, l(3), l(0), r2.x, r0.z
ld_indexable(buffer)(uint,uint,uint,uint) r2.xyzw, r0.zzzz, t1.xyzw
movc r0.x, r0.w, r2.x, r0.x
ishl r2.x, r0.x, l(1)
bfi r0.x, l(31), l(1), r0.x, l(1)
if_nz r0.w
  utof r2.zw, r2.zzzw
  mul r0.w, r2.z, l(0.00392156886)
  mov r3.x, cb1[r2.x + 8].w
  mov r3.y, cb1[r0.x + 8].w
  ishl r2.z, r2.y, l(1)
  bfi r2.y, l(31), l(1), r2.y, l(1)
  dp4 r3.z, cb1[r2.z + 8].xyzw, cb1[r2.x + 8].xyzw
  ge r3.z, r3.z, l(0.000000)
  movc r3.z, r3.z, l(0.00392156886), l(-0.00392156886)
  mul r2.w, r2.w, r3.z
  mul r4.xyz, r2.wwww, cb1[r2.z + 8].xyzx
  mul r5.xyz, r2.wwww, cb1[r2.y + 8].xyzx
  mul r6.x, r2.w, cb1[r2.z + 8].w
  mul r6.y, r2.w, cb1[r2.y + 8].w
  mad r4.xyz, r0.wwww, cb1[r2.x + 8].xyzx, r4.xyzx
  mad r2.yzw, r0.wwww, cb1[r0.x + 8].xxyz, r5.xxyz
  mad r3.xy, r0.wwww, r3.yxyy, r6.yxyy
  if_nz r1.w
    iadd r0.z, r0.z, l(1)
    ld_indexable(buffer)(uint,uint,uint,uint) r5.xyzw, r0.zzzz, t1.xyzw
    ishl r0.zw, r5.xxxy, l(0, 0, 1, 1)
    bfi r3.zw, l(0, 0, 31, 31), l(0, 0, 1, 1), r5.xxxy, l(0, 0, 1, 1)
    dp4 r1.w, cb1[r0.z + 8].xyzw, cb1[r2.x + 8].xyzw
    utof r5.xy, r5.zwzz
    ge r1.w, r1.w, l(0.000000)
    movc r1.w, r1.w, l(0.00392156886), l(-0.00392156886)
    mul r1.w, r1.w, r5.x
    mul r6.x, r1.w, cb1[r0.z + 8].w
    mul r6.y, r1.w, cb1[r3.z + 8].w
    mad r5.xzw, r1.wwww, cb1[r0.z + 8].xxyz, r4.xxyz
    mad r7.xyz, r1.wwww, cb1[r3.z + 8].xyzx, r2.yzwy
    add r6.xy, r3.yxyy, r6.xyxx
    dp4 r0.z, cb1[r0.w + 8].xyzw, cb1[r2.x + 8].xyzw
    ge r0.z, r0.z, l(0.000000)
    movc r0.z, r0.z, l(0.00392156886), l(-0.00392156886)
    mul r0.z, r0.z, r5.y
    mul r8.x, r0.z, cb1[r0.w + 8].w
    mul r8.y, r0.z, cb1[r3.w + 8].w
    mad r4.xyz, r0.zzzz, cb1[r0.w + 8].xyzx, r5.xzwx
    mad r2.yzw, r0.zzzz, cb1[r3.w + 8].xxyz, r7.xxyz
    add r3.xy, r6.yxyy, r8.yxyy
    mov r4.w, r3.y
  else
    mov r4.w, r3.y
  endif
  dp4 r0.z, r4.xyzw, r4.xyzw
  sqrt r0.z, r0.z
  div r5.xyz, r4.xyzx, r0.zzzz
  div r2.yzw, r2.yyzw, r0.zzzz
  mov r3.y, r4.w
  div r0.zw, r3.xxxy, r0.zzzz
  mov r5.w, r0.w
else
  mov r2.yzw, cb1[r0.x + 8].xxyz
  mov r5.xyzw, cb1[r2.x + 8].xyzw
  mov r0.z, cb1[r0.x + 8].w
endif
add r3.xyzw, r5.xyzw, r5.xyzw
mad r4.xyz, v0.xyzx, cb1[5].wwww, cb1[5].xyzx
mad r0.xyw, r0.yyyy, r1.xyxz, r4.xyxz
mul r1.xyz, r0.xywx, r5.yzxy
mad r1.xyz, r5.xyzx, r0.ywxy, -r1.xyzx
mad r1.xyz, r5.wwww, r0.wxyw, r1.xyzx
mad r0.xyw, -r3.zxzy, r1.zxzy, r0.xyxw
mad r0.xyw, r3.yzyx, r1.xyxz, r0.xyxw
mad r0.xyw, -r3.zxzy, r2.zwzy, r0.xyxw
mad r0.xyw, r3.yzyx, r2.wywz, r0.xyxw
mad r0.xyw, r3.wwww, r2.yzyw, r0.xyxw
mad r0.xyz, -r0.zzzz, r3.xyzx, r0.xywx
add r0.xyz, r0.xyzx, cb12[15].xyzx
mul r1.xyzw, r0.yyyy, cb12[1].xyzw
mad r1.xyzw, cb12[0].xyzw, r0.xxxx, r1.xyzw
mad r0.xyzw, cb12[2].xyzw, r0.zzzz, r1.xyzw
add r0.xyzw, r0.xyzw, cb12[14].xyzw
mad o0.xy, v3.xyxx, cb1[6].xyxx, cb1[6].zwzz
ld_indexable(texture2d)(float,float,float,float) r1.xyzw, l(0, 0, 0, 0), t2.xyzw
div r0.xy, r0.xyxx, r0.wwww
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), r1.zwzz
mad r0.x, r0.x, r1.z, r1.x
add r2.x, r0.x, l(-1.000000)
add r0.x, r1.y, l(-1.000000)
mad r2.y, r0.y, r1.w, -r0.x
mul o2.xy, r0.wwww, r2.xyxx
mov o2.zw, r0.zzzw
ret
// Approximately 0 instruction slots used

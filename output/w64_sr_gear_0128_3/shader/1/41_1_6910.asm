//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:53:55 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float
// TEXCOORD                 1   xyzw        1     NONE   float
// TEXCOORD                 2   xyzw        2     NONE   float
// TEXCOORD                 3   xyzw        3     NONE   float
// TEXCOORD                 4   xyzw        4     NONE   float
// SV_VERTEXID              0   x           5   VERTID    uint   x
// SV_InstanceID            0   x           6   INSTID    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyz         1     NONE   float   xyz
// TEXCOORD                 2   xyz         2     NONE   float   xyz
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xy          4     NONE   float   xy
// SV_POSITION              0   xyzw        5      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[146], immediateIndexed
dcl_constantbuffer cb12[8], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_resource_buffer (float,float,float,float) t2
dcl_input_sgv v5.x, vertex_id
dcl_output o0.xyzw
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xy
dcl_output_siv o5.xyzw, position
dcl_temps 7
dcl_indexableTemp x0[4], 4
itof r0.x, v5.x
add r0.x, r0.x, l(0.500000)
mad r0.x, r0.x, l(0.500000), l(-0.500000)
round_ne r0.x, r0.x
ftoi r0.y, r0.x
ishl r0.z, r0.y, l(1)
iadd r0.z, -r0.z, v5.x
imul null, r0.w, r0.y, l(5)
itof r0.w, r0.w
add r0.w, r0.w, cb0[36].x
ftou r1.x, r0.w
ld_indexable(buffer)(float,float,float,float) r1.x, r1.xxxx, t2.wxyz
add r1.yzw, r0.wwww, l(0.000000, 1.000000, 3.000000, 4.000000)
ftou r1.yzw, r1.yyzw
ld_indexable(buffer)(float,float,float,float) r2.xyzw, r1.yyyy, t2.xyzw
ld_indexable(buffer)(float,float,float,float) r3.xyz, r1.zzzz, t2.yzwx
ld_indexable(buffer)(float,float,float,float) r0.w, r1.wwww, t2.yzwx
mov x0[0].y, l(0)
mov x0[1].y, l(1.000000)
mov x0[2].y, l(0)
mov x0[3].y, l(1.000000)
mul r1.yzw, r2.yyyy, cb1[1].xxyz
mad r1.yzw, cb1[0].xxyz, r2.xxxx, r1.yyzw
mad r1.yzw, cb1[2].xxyz, r2.zzzz, r1.yyzw
add r1.yzw, r1.yyzw, cb1[3].xxyz
lt r3.w, l(1.000000), cb0[112].x
if_nz r3.w
  ilt r3.w, r0.y, l(0)
  if_nz r3.w
    add r3.w, l(1.000000), cb0[36].x
    ftou r3.w, r3.w
    ld_indexable(buffer)(float,float,float,float) r4.xyz, r3.wwww, t2.xyzw
  else
    add r3.w, l(-1.000000), cb0[112].x
    add r0.x, r0.x, -r3.w
    lt r0.x, |r0.x|, l(0.001000)
    if_nz r0.x
      iadd r0.x, r0.y, l(-1)
      itof r0.x, r0.x
      mad r0.x, r0.x, cb0[37].x, cb0[36].x
      add r0.x, r0.x, l(1.000000)
      ftou r0.x, r0.x
      ld_indexable(buffer)(float,float,float,float) r5.xyz, r0.xxxx, t2.xyzw
      mad r4.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), -r5.xyzx
    else
      iadd r0.x, r0.y, l(1)
      itof r0.x, r0.x
      mad r0.x, r0.x, cb0[37].x, cb0[36].x
      add r0.x, r0.x, l(1.000000)
      ftou r0.x, r0.x
      ld_indexable(buffer)(float,float,float,float) r4.xyz, r0.xxxx, t2.xyzw
    endif
  endif
else
  mov r4.xyz, l(0,0,0,0)
endif
mul r2.xyz, r4.yyyy, cb1[1].zxyz
mad r2.xyz, cb1[0].zxyz, r4.xxxx, r2.xyzx
mad r2.xyz, cb1[2].zxyz, r4.zzzz, r2.xyzx
add r2.xyz, r2.xyzx, cb1[3].zxyz
add r2.xyz, -r1.wyzw, r2.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
sqrt r0.x, r0.x
lt r0.x, l(0.000010), r0.x
movc r2.xyz, r0.xxxx, r2.xyzx, l(0,1.000000,0,0)
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r4.xyz, r0.xxxx, r2.yzxy
add r5.xyz, -r1.yzwy, cb12[7].xyzx
mul r6.xyz, r2.xyzx, r5.yzxy
mad r2.xyz, r2.zxyz, r5.zxyz, -r6.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r2.xyz, r0.xxxx, r2.xyzx
mul r2.xyz, r3.yyyy, r2.xyzx
itof r0.x, r0.z
lt r0.x, r0.x, l(0.500000)
movc r2.xyz, r0.xxxx, -r2.xyzx, r2.xyzx
add r1.yzw, r1.yyzw, r2.xxyz
dp3 r0.x, r4.xyzx, r5.xyzx
mad r2.xyz, -r0.xxxx, r4.xyzx, r5.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul o1.xyz, r0.xxxx, r2.xyzx
dp3 r0.x, r5.xyzx, r5.xyzx
rsq r0.y, r0.x
mul r2.xyz, r0.yyyy, r5.xyzx
dp3 r0.y, r2.xyzx, r4.xyzx
mul r2.x, l(0.0174532942), cb0[105].x
add r2.y, cb0[105].x, cb0[106].x
mul r2.y, r2.y, l(0.0174532942)
sincos null, r2.xy, r2.xyxx
add r0.y, |r0.y|, -r2.x
add r2.x, -r2.x, r2.y
div_sat r0.y, r0.y, r2.x
mov o0.y, x0[r0.z + 0].y
mul r4.xyzw, r1.zzzz, cb12[1].xyzw
mad r4.xyzw, cb12[0].xyzw, r1.yyyy, r4.xyzw
mad r4.xyzw, cb12[2].xyzw, r1.wwww, r4.xyzw
add r4.xyzw, r4.xyzw, cb12[3].xyzw
sqrt r0.x, r0.x
mad r0.z, r0.x, l(4.000000), l(-2.000000)
add r0.x, -r0.x, l(10000.000000)
min_sat r0.x, r0.x, r0.z
mul r0.x, r0.y, r0.x
mul r0.x, r0.x, cb0[15].w
mul r0.x, r0.x, cb0[145].x
lt r0.y, l(0.999000), r2.w
movc o0.z, r0.y, l(0), r0.x
add o2.xyz, -r1.yzwy, cb12[7].xyzx
mov o0.w, r4.w
mov o0.x, r1.x
mov o3.x, r1.x
mov o3.yw, r3.xxxy
mov o3.z, l(0)
mov o5.xyzw, r4.xyzw
mov o4.x, r3.z
mov o4.y, r0.w
ret
// Approximately 0 instruction slots used

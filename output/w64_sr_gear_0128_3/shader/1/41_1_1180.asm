//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:54:12 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyzw
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy
// SV_VERTEXID              0   x           4   VERTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyz         4     NONE   float   xyz
// TEXCOORD                 8   xyzw        5     NONE   float   xyzw
// SV_POSITION              0   xyzw        6      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[7], immediateIndexed
dcl_constantbuffer cb12[16], immediateIndexed
dcl_constantbuffer cb1[24], dynamicIndexed
dcl_resource_buffer (float,float,float,float) t0
dcl_resource_buffer (uint,uint,uint,uint) t1
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xy
dcl_input_sgv v4.x, vertex_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_output_siv o6.xyzw, position
dcl_temps 13
umin r0.x, v4.x, cb1[4].w
ld_indexable(buffer)(float,float,float,float) r0.xyzw, r0.xxxx, t0.xyzw
mad r1.xy, v0.yzyy, cb1[5].wwww, cb1[5].yzyy
add r1.x, r1.y, r1.x
mad r1.x, r1.x, cb0[2].x, cb0[1].x
mad r1.x, r0.x, cb0[3].x, r1.x
mad r1.x, cb0[4].w, r1.x, cb0[4].z
round_ne r1.y, r1.x
add r1.x, -r1.y, r1.x
mad r1.y, |r1.x|, l(-16.000000), l(8.000000)
mul r1.x, r1.y, r1.x
mad r1.y, |r1.x|, l(0.225000), l(0.775000)
mul r1.x, r1.y, r1.x
mad r1.x, cb0[4].x, r1.x, cb0[4].y
mul r1.x, r1.x, cb0[0].x
mul r1.x, r0.x, r1.x
mul r2.xy, r1.xxxx, cb0[5].xxxx
mul r2.z, r1.x, cb0[6].x
mul r1.x, v0.w, l(32767.099609)
ftoi r1.x, r1.x
imax r1.y, -r1.x, r1.x
ige r1.z, r1.y, l(2048)
ilt r1.w, r1.x, l(0)
ishl r2.w, v4.x, l(1)
movc r2.w, r1.w, r2.w, v4.x
ishl r1.y, r1.y, l(3)
iadd r1.y, r1.y, l(0xffffc000)
bfi r1.y, l(3), l(0), r2.w, r1.y
ld_indexable(buffer)(uint,uint,uint,uint) r3.xyzw, r1.yyyy, t1.xyzw
movc r1.x, r1.z, r3.x, r1.x
imul null, r2.w, r1.x, l(3)
imad r4.xy, l(3, 3, 0, 0), r1.xxxx, l(1, 2, 0, 0)
if_nz r1.z
  utof r1.xz, r3.zzwz
  mul r1.xz, r1.xxzx, l(0.00392156886, 0.000000, 0.00392156886, 0.000000)
  mov r5.x, cb1[r2.w + 8].w
  mov r5.y, cb1[r4.x + 8].w
  mov r5.z, cb1[r4.y + 8].w
  imul null, r3.x, r3.y, l(3)
  imad r3.yz, l(0, 3, 3, 0), r3.yyyy, l(0, 1, 2, 0)
  mul r6.xyz, r1.zzzz, cb1[r3.x + 8].xyzx
  mul r7.x, r1.z, cb1[r3.x + 8].w
  mul r7.y, r1.z, cb1[r3.y + 8].w
  mul r7.z, r1.z, cb1[r3.z + 8].w
  mul r3.xyw, r1.zzzz, cb1[r3.y + 8].xyxz
  mul r8.xyz, r1.zzzz, cb1[r3.z + 8].xyzx
  mad r6.xyz, cb1[r2.w + 8].xyzx, r1.xxxx, r6.xyzx
  mad r5.xyz, r5.xyzx, r1.xxxx, r7.xyzx
  mad r3.xyz, cb1[r4.x + 8].xyzx, r1.xxxx, r3.xywx
  mad r7.xyz, cb1[r4.y + 8].xyzx, r1.xxxx, r8.xyzx
  if_nz r1.w
    iadd r1.x, r1.y, l(1)
    ld_indexable(buffer)(uint,uint,uint,uint) r1.xyzw, r1.xxxx, t1.xyzw
    utof r1.zw, r1.zzzw
    mul r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.00392156886, 0.00392156886)
    imul null, r4.zw, r1.xxxy, l(0, 0, 3, 3)
    imad r8.xyzw, l(3, 3, 3, 3), r1.xxyy, l(1, 2, 1, 2)
    mul r9.x, r1.z, cb1[r4.z + 8].w
    mul r9.y, r1.z, cb1[r8.x + 8].w
    mul r9.z, r1.z, cb1[r8.y + 8].w
    mad r10.xyz, r1.zzzz, cb1[r4.z + 8].xyzx, r6.xyzx
    add r9.xyz, r5.xyzx, r9.xyzx
    mad r11.xyz, r1.zzzz, cb1[r8.x + 8].xyzx, r3.xyzx
    mad r1.xyz, r1.zzzz, cb1[r8.y + 8].xyzx, r7.xyzx
    mul r12.x, r1.w, cb1[r4.w + 8].w
    mul r12.y, r1.w, cb1[r8.z + 8].w
    mul r12.z, r1.w, cb1[r8.w + 8].w
    mad r6.xyz, r1.wwww, cb1[r4.w + 8].xyzx, r10.xyzx
    add r5.xyz, r9.xyzx, r12.xyzx
    mad r3.xyz, r1.wwww, cb1[r8.z + 8].xyzx, r11.xyzx
    mad r7.xyz, r1.wwww, cb1[r8.w + 8].xyzx, r1.xyzx
  endif
else
  mov r6.xyz, cb1[r2.w + 8].xyzx
  mov r5.x, cb1[r2.w + 8].w
  mov r5.y, cb1[r4.x + 8].w
  mov r5.z, cb1[r4.y + 8].w
  mov r3.xyz, cb1[r4.x + 8].xyzx
  mov r7.xyz, cb1[r4.y + 8].xyzx
endif
mad r1.xyz, v0.xyzx, cb1[5].wwww, cb1[5].xyzx
add r1.xyz, r2.xyzx, r1.xyzx
add r2.xyz, r5.xyzx, cb12[15].xyzx
mov r6.w, r2.x
mov r1.w, l(1.000000)
dp4 r4.x, r6.xyzw, r1.xyzw
mov r3.w, r2.y
dp4 r4.y, r3.xyzw, r1.xyzw
mov r7.w, r2.z
dp4 r4.z, r7.xyzw, r1.xyzw
mul r2.xyzw, r4.yyyy, cb12[1].xyzw
mad r2.xyzw, cb12[0].xyzw, r4.xxxx, r2.xyzw
mad r2.xyzw, cb12[2].xyzw, r4.zzzz, r2.xyzw
add o6.xyzw, r2.xyzw, cb12[14].xyzw
add o4.xyz, r4.xyzx, cb12[7].xyzx
dp3 r1.x, v1.xyzx, v1.xyzx
rsq r1.x, r1.x
mul r1.xyw, r1.xxxx, v1.xyxz
dp3 r2.x, r6.xyzx, r1.xywx
dp3 r2.y, r3.xyzx, r1.xywx
dp3 r2.z, r7.xyzx, r1.xywx
dp3 r1.x, v2.xyzx, v2.xyzx
rsq r1.x, r1.x
mul r1.xyw, r1.xxxx, v2.xyxz
dp3 r4.x, r6.xyzx, r1.xywx
dp3 r4.y, r3.xyzx, r1.xywx
dp3 r4.z, r7.xyzx, r1.xywx
mul r1.xyw, r2.zxzy, r4.yzyx
mad r1.xyw, r2.yzyx, r4.zxzy, -r1.xyxw
mul o2.xyz, r1.xywx, v2.wwww
mad r1.xy, v3.xyxx, cb1[6].xyxx, cb1[6].zwzz
mul_sat r1.w, r2.z, cb1[7].z
add_sat o0.w, r1.w, cb1[7].w
mul r1.w, v1.w, l(32767.099609)
ftoi r1.w, r1.w
ishr r2.w, r1.w, l(3)
and r2.w, r2.w, l(4095)
and r1.w, r1.w, l(7)
itof r1.w, r1.w
add o2.w, r1.w, l(0.100000)
ld_indexable(buffer)(uint,uint,uint,uint) r3.xyzw, r2.wwww, t1.xyzw
ishl r3.yw, r3.yyyw, l(0, 8, 0, 8)
or r3.xy, r3.ywyy, r3.xzxx
f16tof32 r3.xy, r3.xyxx
mul o3.zw, r1.xxxy, r3.xxxy
mov o0.xyz, r2.xyzx
mov o1.w, r1.z
mov o1.xyz, r4.xyzx
mov o3.xy, r1.xyxx
mov o5.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used

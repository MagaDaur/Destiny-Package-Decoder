//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:53:52 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { -1.000000, 0, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0, 0, -1.000000, 0} }
dcl_constantbuffer cb0[37], immediateIndexed
dcl_constantbuffer cb13[2], immediateIndexed
dcl_constantbuffer cb12[13], immediateIndexed
dcl_constantbuffer cb3[10], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_uav_typed_texture3d (uint,uint,uint,uint) u0
dcl_uav_typed_texture3d (uint,uint,uint,uint) u1
dcl_uav_typed_texture3d (uint,uint,uint,uint) u2
dcl_input vThreadID.xyz
dcl_temps 8
dcl_thread_group 8, 8, 1
ftou r0.xyz, cb0[36].xyzx
iadd r0.yzw, r0.xxyz, vThreadID.xxyz
ftou r1.xyz, cb3[5].xyzx
ult r1.xyz, r0.yzwy, r1.xyzx
and r1.x, r1.y, r1.x
and r1.x, r1.z, r1.x
if_nz r1.x
  if_z r0.w
    itof r1.xy, r0.yzyy
    div r1.xy, r1.xyxx, cb3[4].xyxx
    mul r1.xy, r1.xyxx, cb12[12].xyxx
    mul r1.xy, r1.xyxx, l(0.031250, 0.031250, 0.000000, 0.000000)
    sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t0.xyzw, s1, l(0.000000)
    round_ni r2.x, |r1.w|
    mul r2.y, r2.x, l(0.010000)
    ge r2.x, l(0.000000), r2.x
    movc r2.x, r2.x, l(0.010000), r2.y
    mov r2.y, l(-1)
  else
    ftou r2.z, cb3[9].x
    mov r3.xy, l(0,0,0,0)
    ineg r3.z, r2.z
    iadd r3.xyz, r0.yzwy, r3.xyzx
    utof r3.xyz, r3.xyzx
    add r3.xyz, r3.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
    div r3.xyz, r3.xyzx, cb3[2].xyzx
    round_ni r2.z, r3.z
    frc r3.w, r3.z
    mad r3.xyz, r3.xywx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    mul r3.xyz, r3.xyzx, cb3[3].xyzx
    exp r2.z, r2.z
    mul r4.xyz, r2.zzzz, cb3[6].xyzx
    mul r2.z, r2.z, cb3[7].x
    div r5.xyz, cb3[0].xyzx, r4.xyzx
    round_ni r5.xyz, r5.xyzx
    mul r5.xyz, r4.xyzx, r5.xyzx
    mad r1.xyz, r3.xyzx, r4.xyzx, r5.xyzx
    mul r2.x, r2.z, l(0.500000)
    mul r3.xyz, r2.xxxx, -cb12[6].xyzx
    mad r3.xyz, -r3.xyzx, l(5.196300, 5.196300, 5.196300, 0.000000), cb12[7].xyzx
    add r3.xyz, r1.xyzx, -r3.xyzx
    dp3 r2.z, r3.xyzx, -cb12[6].xyzx
    lt r2.y, l(0.000000), r2.z
    mov r1.w, r2.x
  endif
  if_nz r2.y
    add r1.xyz, r1.xyzx, -cb12[7].xyzx
    dp4 r2.y, cb0[7].xyzw, cb0[8].xyzw
    mov r3.w, -r2.y
    lt r1.w, r1.w, l(0.000000)
    mov r4.w, l(1.000000)
    mov r3.xyz, cb0[8].xyzx
    mov r4.xyz, r1.xyzx
    mov r2.y, l(0)
    loop
      ige r2.z, r2.y, l(6)
      breakc_nz r2.z
      mul r5.xyz, r2.xxxx, icb[r2.y + 0].xyzx
      movc r5.xyz, r0.wwww, r5.xyzx, l(0,0,0,0)
      add r4.xyz, r4.xyzx, r5.xyzx
      dp4 r2.z, r4.xyzw, r3.xyzw
      max r2.z, r2.z, -cb0[9].x
      min r2.z, r2.z, cb0[9].x
      mad r5.xyz, cb0[8].xyzx, r2.zzzz, cb0[7].xyzx
      add r5.xyz, -r4.xyzx, r5.xyzx
      dp3 r2.z, r5.xyzx, r5.xyzx
      sqrt r2.z, r2.z
      mad_sat r2.w, r2.z, cb0[26].x, cb0[26].y
      mul r2.w, r2.w, r2.w
      movc r2.w, r1.w, l(0), r2.w
      lt r5.w, l(0.000100), r2.w
      if_nz r5.w
        div r5.xyz, r5.xyzx, r2.zzzz
        dp3 r2.z, r4.xyzx, r4.xyzx
        rsq r2.z, r2.z
        mul r6.xyz, r2.zzzz, r4.xyzx
        dp3_sat r5.w, icb[r2.y + 0].xyzx, r5.xyzx
        mad r7.xyz, -r4.xyzx, r2.zzzz, r5.xyzx
        dp3 r2.z, r7.xyzx, r7.xyzx
        rsq r2.z, r2.z
        mul r7.xyz, r2.zzzz, r7.xyzx
        dp3 r2.z, icb[r2.y + 0].xyzx, -r6.xyzx
        add r2.z, |r2.z|, l(0.000010)
        dp3_sat r5.x, r5.xyzx, r7.xyzx
        dp2 r5.x, r5.xxxx, r5.xxxx
        add r5.y, -r5.w, l(1.000000)
        add r5.x, r5.x, l(-0.500000)
        mul r5.z, r5.y, r5.y
        mul r5.z, r5.z, r5.z
        mul r5.y, r5.z, r5.y
        mad r5.y, r5.x, r5.y, l(1.000000)
        add r2.z, -r2.z, l(1.000000)
        mul r5.z, r2.z, r2.z
        mul r5.z, r5.z, r5.z
        mul r2.z, r2.z, r5.z
        mad r2.z, r5.x, r2.z, l(1.000000)
        mul r2.z, r2.z, r5.y
        mul r2.z, r5.w, r2.z
        mul r2.z, r2.z, l(0.318309873)
        mad r5.xyz, r2.zzzz, cb0[25].xyzx, cb0[19].xyzx
        mul r5.xyz, r2.wwww, r5.xyzx
        mul r5.xyz, r5.xyzx, cb0[28].xxxx
        div r5.xyz, r5.xyzx, cb13[1].xxxx
        dp3 r2.z, r5.xyzx, r5.xyzx
        lt r2.z, l(0.000100), r2.z
        if_nz r2.z
          imad r0.x, r0.y, l(6), r2.y
          mul r5.xyz, r5.xyzx, l(8388608.000000, 8388608.000000, 8388608.000000, 0.000000)
          ftou r5.xyz, r5.xyzx
          atomic_iadd u0, r0.xzwx, r5.x
          atomic_iadd u1, r0.xzwx, r5.y
          atomic_iadd u2, r0.xzwx, r5.z
        endif
      endif
      iadd r2.y, r2.y, l(1)
    endloop
  endif
endif
ret
// Approximately 0 instruction slots used

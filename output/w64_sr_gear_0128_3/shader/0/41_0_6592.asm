//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:53:56 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyz
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyz         4     NONE   float   xyz
// SV_POSITION              0   xyzw        5      POS   float
// SV_isFrontFace           0   x           6    FFACE    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[21], immediateIndexed
dcl_constantbuffer cb12[8], immediateIndexed
dcl_constantbuffer cb7[63], dynamicIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t9
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 10
add r0.xyz, -v4.xyzx, cb12[7].xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.x, r0.x
ftou r0.y, v2.w
uge r0.z, r0.y, l(4)
if_nz r0.z
  mad r0.zw, v3.zzzw, cb7[7].xxxy, cb7[7].zzzw
  sample_indexable(texture2d)(float,float,float,float) r0.z, r0.zwzz, t9.xyzw, s1
  add_sat r0.z, r0.z, cb7[8].z
else
  uge r0.w, r0.y, l(2)
  if_nz r0.w
    mad r1.xy, v3.zwzz, cb7[4].xyxx, cb7[4].zwzz
    sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t7.xywz, s1
    add_sat r0.z, r0.w, cb7[5].z
  else
    mad r1.xy, v3.zwzz, cb7[1].xyxx, cb7[1].zwzz
    sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t5.xywz, s1
    add_sat r0.z, r0.w, cb7[2].z
  endif
endif
imad r1.xyzw, l(9, 9, 9, 9), r0.yyyy, l(9, 10, 11, 12)
imad r2.xyzw, l(9, 9, 9, 9), r0.yyyy, l(13, 14, 15, 17)
mov_sat r0.yw, cb7[r1.z + 0].yyyw
mov_sat r3.xy, cb7[r1.w + 0].yzyy
mov_sat r1.z, cb7[r2.w + 0].w
sample_indexable(texture2d)(float,float,float,float) r4.xyz, v3.xyxx, t0.xyzw, s2
sample_indexable(texture2d)(float,float,float,float) r3.zw, v3.xyxx, t1.zwxy, s3
mad r3.zw, r3.zzzw, cb0[20].xxxx, cb0[20].yyyy
sample_indexable(texture2d)(float,float,float,float) r5.xyz, v3.xyxx, t2.xzwy, s4
ge r2.w, r5.z, l(0.156862751)
and r4.w, r2.w, l(0x3f800000)
add r6.xy, r5.zyzz, l(-0.188235298, -0.156862751, 0.000000, 0.000000)
mul_sat r6.xy, r6.xyxx, l(1.231884, 1.18604648, 0.000000, 0.000000)
mul_sat r7.yz, r5.yyzy, l(0.000000, 7.968750, 7.968750, 0.000000)
mad_sat r5.y, cb7[r2.z + 0].y, r6.x, cb7[r2.z + 0].x
mad_sat r2.z, cb7[r2.z + 0].w, r5.y, cb7[r2.z + 0].z
mov_sat r5.y, cb0[2].x
mul r7.x, r5.y, l(-2.000000)
add r5.z, l(128.500000), cb0[3].x
mul r5.z, r5.z, l(0.00390625000)
ge r5.w, l(0.050000), r7.z
movc r5.z, r5.w, r5.z, l(-1.000000)
mad_sat r5.w, cb7[r2.x + 0].y, r7.x, cb7[r2.x + 0].x
mad_sat r2.x, cb7[r2.x + 0].w, r5.w, cb7[r2.x + 0].z
mul_sat r6.xzw, r4.xxyz, l(4.000000, 0.000000, 4.000000, 4.000000)
add_sat r8.xyz, r4.xyzx, l(-0.250000, -0.250000, -0.250000, 0.000000)
mad_sat r9.xyz, cb7[r1.x + 0].xyzx, r6.xzwx, r8.xyzx
add r0.z, r0.z, l(-1.000000)
mul r0.y, r0.z, r0.y
mad_sat r6.xzw, cb7[r2.y + 0].xxyz, r6.xxzw, r8.xxyz
add r8.xyz, -r6.xzwx, r9.xyzx
mad r6.xzw, r2.zzzz, r8.xxyz, r6.xxzw
mad r0.z, -r5.y, l(-2.000000), r2.x
mad r0.z, r2.z, r0.z, r7.x
add r1.x, r0.w, -r1.z
mad r2.y, r2.z, r1.x, r1.z
mad r0.y, r2.z, r0.y, l(1.000000)
mul r0.z, r0.z, cb0[19].x
add r1.x, l(128.500000), cb7[r1.w + 0].x
mul r1.x, r1.x, l(0.00390625000)
ge r0.w, l(0.050000), r0.w
movc r0.w, r0.w, r1.x, l(-1.000000)
min r0.y, r0.y, r0.z
lt r0.z, l(0.000100), r3.x
mul r1.x, r3.x, l(-2.000000)
mad r1.z, r3.x, l(-2.000000), l(-0.200000)
mul r1.z, r0.y, r1.z
mad r1.x, r1.z, l(-5.002501), r1.x
min r1.x, r0.y, r1.x
movc r2.x, r0.z, r1.x, r0.y
mad r1.xzw, r6.xxzw, cb0[18].xxyz, -r4.xxyz
mad r1.xzw, r4.wwww, r1.xxzw, r4.xxyz
mad r0.yz, r2.zzzz, r3.zzwz, -r3.zzwz
mad r4.xy, r4.wwww, r0.yzyy, r3.zwzz
add r0.yz, -r7.xxzx, r2.xxyx
mad r0.yz, r4.wwww, r0.yyzy, r7.xxzx
mul r2.x, r3.y, r4.w
movc o0.w, r2.w, r0.w, r5.z
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb7[r1.y + 0].w
and r3.xyz, r0.wwww, cb7[r1.y + 0].xyzx
mul r0.w, r6.y, cb0[17].x
mul r3.xyz, r3.xyzx, r0.wwww
mul r3.xyz, r4.wwww, r3.xyzx
mul r5.yzw, r2.zzzz, r3.xxyz
mad r2.yzw, r3.xxyz, r2.zzzz, r1.xxzw
max r0.w, r2.z, r2.y
max r0.w, r2.w, r0.w
add_sat r0.w, r0.w, l(-1.000000)
add r0.w, -r0.w, l(1.000000)
mad r1.xyz, r1.xzwx, r0.wwww, r5.yzwy
max r0.w, r1.y, r1.x
max r0.w, r1.z, r0.w
max r0.w, r0.w, l(1.000000)
div r1.xyz, r1.xyzx, r0.wwww
max r0.w, r5.z, r5.y
max r0.w, r5.w, r0.w
dp2 r1.w, r4.xyxx, r4.xyxx
add r1.w, -r1.w, l(1.000000)
max r1.w, r1.w, l(0.000000)
sqrt r4.z, r1.w
dp3 r1.w, r4.xyzx, r4.xyzx
rsq r1.w, r1.w
mul r2.yzw, r1.wwww, r4.xxyz
mul r3.xyz, r2.zzzz, v2.xyzx
mad r3.xyz, v1.xyzx, r2.yyyy, r3.xyzx
mad r2.yzw, v0.xxyz, r2.wwww, r3.xxyz
dp3 r1.w, r2.yzwy, r2.yzwy
rsq r1.w, r1.w
mul r2.yzw, r1.wwww, r2.yyzw
ne r1.w, l(0.000000), cb0[5].x
if_nz r1.w
  deriv_rtx_coarse r3.xy, v3.xyxx
  dp2 r1.w, r3.xyxx, r3.xyxx
  sqrt r1.w, r1.w
  deriv_rty_coarse r3.xy, v3.xyxx
  dp2 r3.x, r3.xyxx, r3.xyxx
  sqrt r3.x, r3.x
  max r1.w, r1.w, r3.x
  div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
  log r1.w, r1.w
  round_ni r3.x, r1.w
  exp r3.x, r3.x
  round_pi r3.y, r1.w
  exp r3.y, r3.y
  mul r3.xz, r3.xxxx, v3.xxyx
  round_ni r3.xz, r3.xxzx
  dp2 r3.w, r3.xzxx, l(17.000000, 0.100000, 0.000000, 0.000000)
  sincos r3.w, null, r3.w
  mul r3.w, r3.w, l(10000.000000)
  mad r3.x, r3.z, l(13.000000), r3.x
  sincos r3.x, null, r3.x
  add r3.x, |r3.x|, l(0.100000)
  mul r3.x, r3.x, r3.w
  mul r3.yz, r3.yyyy, v3.xxyx
  round_ni r3.yz, r3.yyzy
  dp2 r3.w, r3.yzyy, l(17.000000, 0.100000, 0.000000, 0.000000)
  sincos r3.w, null, r3.w
  mul r3.w, r3.w, l(10000.000000)
  mad r3.y, r3.z, l(13.000000), r3.y
  sincos r3.y, null, r3.y
  add r3.y, |r3.y|, l(0.100000)
  mul r3.y, r3.y, r3.w
  frc r3.xy, r3.xyxx
  frc r1.w, r1.w
  add r3.y, -r3.x, r3.y
  mad r3.x, r1.w, r3.y, r3.x
  add r3.y, -r1.w, l(1.000000)
  min r1.w, r1.w, r3.y
  add r3.z, r1.w, r1.w
  add r3.w, -r1.w, l(1.000000)
  mul r3.yz, r3.xxwx, r3.xxzx
  div r3.y, r3.y, r3.z
  mad r4.x, -r1.w, l(0.500000), r3.x
  div r4.x, r4.x, r3.w
  add r4.y, -r3.x, l(1.000000)
  mul r4.y, r4.y, r4.y
  div r3.z, r4.y, r3.z
  add r3.z, -r3.z, l(1.000000)
  lt r3.w, r3.x, r3.w
  lt r1.w, r3.x, r1.w
  movc r1.w, r1.w, r3.y, r4.x
  movc r1.w, r3.w, r1.w, r3.z
  ge r3.x, l(0.500000), cb0[4].x
  add r3.y, cb0[4].x, cb0[4].x
  mad r3.y, r1.w, -r3.y, r3.y
  mad r3.z, cb0[4].x, l(2.000000), l(-2.000000)
  mad r1.w, r1.w, r3.z, l(1.000000)
  movc r1.w, r3.x, r3.y, r1.w
else
  mov r1.w, cb0[4].x
endif
add r1.w, -r1.w, r7.y
lt r1.w, r1.w, l(0.000000)
discard_nz r1.w
mov_sat r1.w, cb0[15].x
dp3 r3.x, v0.xyzx, v0.xyzx
rsq r3.x, r3.x
mul r3.xyz, r3.xxxx, v0.xyzx
dp3 r3.x, cb0[8].xyzx, r3.xyzx
add r3.y, -cb0[6].x, cb0[7].x
mad_sat r3.x, r3.x, r3.y, cb0[6].x
add r3.y, v4.z, -cb0[9].z
mul r3.y, r3.y, cb0[10].x
max r3.y, r3.y, l(0.000000)
log r3.y, r3.y
mul r3.y, r3.y, cb0[11].x
exp r3.y, r3.y
mul_sat r3.y, r3.y, cb0[12].x
mul r3.x, r3.y, r3.x
mad_sat r0.x, r0.x, cb0[13].x, cb0[13].y
mul r0.x, r0.x, r3.x
dp3 r3.x, r1.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
max r3.x, r3.x, l(0.000100)
log r3.x, r3.x
mul r3.x, r3.x, -cb0[14].x
exp r3.x, r3.x
mul r0.x, r0.x, r3.x
add o2.w, r1.w, v0.w
mad r0.x, r0.x, cb0[16].x, r0.w
mad r0.y, r0.y, l(0.125000), l(0.375000)
mad_sat o1.xyz, r2.yzwy, r0.yyyy, l(0.500000, 0.500000, 0.500000, 0.000000)
add r0.x, r0.x, l(0.00781250000)
log r0.x, r0.x
mad_sat r0.x, r0.x, l(0.0769230798), l(0.538461566)
mov_sat r5.x, r5.x
add r0.x, r0.x, r5.x
mul o2.y, r0.x, l(0.500000)
mul o2.z, r2.x, l(0.800000)
mov o0.xyz, r1.xyzx
mov o1.w, l(0)
mov o2.x, r0.z
ret
// Approximately 0 instruction slots used

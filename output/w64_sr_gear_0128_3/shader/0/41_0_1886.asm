//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:54:09 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyz
// TEXCOORD                 2   xyz         2     NONE   float   xyz
// TEXCOORD                 3   xyzw        3     NONE   float   xy
// TEXCOORD                 4   xyz         4     NONE   float   xyz
// SV_POSITION              0   xyzw        5      POS   float
// SV_isFrontFace           0   x           6    FFACE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[35], immediateIndexed
dcl_constantbuffer cb12[8], immediateIndexed
dcl_constantbuffer cb5[10], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xy
dcl_input_ps linear v4.xyz
dcl_input_ps_sgv v6.x, is_front_face
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 5
add r0.xyz, -v4.xyzx, cb12[7].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mad r0.xyz, r0.xyzx, r0.wwww, cb0[34].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
movc r0.w, v6.x, l(1.000000), l(-1.000000)
mul r1.xyz, r0.wwww, v0.xyzx
mad r2.xy, v3.xyxx, cb0[0].xyxx, cb0[0].zwzz
sample_indexable(texture2d)(float,float,float,float) r2.zw, r2.xyxx, t5.ywzx, s1
add r0.w, r2.w, -cb0[33].x
mov_sat r2.z, r2.z
add r1.w, r0.w, cb5[9].z
add r0.w, r0.w, cb5[8].z
mad r3.xyz, r0.wwww, r1.xyzx, v2.xyzx
mad r4.xyz, r1.wwww, r1.xyzx, v2.xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx
dp3 r0.w, r4.xyzx, r0.xyzx
mad r0.w, -r0.w, r0.w, l(1.000000)
sqrt r0.w, r0.w
log r0.w, r0.w
mul r0.w, r0.w, cb5[9].x
exp r0.w, r0.w
sample_indexable(texture2d)(float,float,float,float) r1.w, v3.xyxx, t5.yzwx, s1
mov_sat r1.w, r1.w
mul r0.w, r0.w, r1.w
mul r0.w, r0.w, cb5[9].y
mul_sat r4.xyz, r0.wwww, cb5[7].xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
dp3 r0.x, r3.xyzx, r0.xyzx
mad r0.x, -r0.x, r0.x, l(1.000000)
sqrt r0.x, r0.x
log r0.x, r0.x
mul r0.x, r0.x, cb5[8].x
exp r0.x, r0.x
mul r0.x, r0.x, cb5[8].y
mul_sat r0.xyz, r0.xxxx, cb5[6].xyzx
add r0.xyz, r0.xyzx, r4.xyzx
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r2.xyxx, t4.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r2.xy, r2.xyxx, t6.xyzw, s1
mad r2.xy, r2.xyxx, cb0[3].xxxx, cb0[3].yyyy
mul_sat r4.xyz, r3.xyzx, l(4.000000, 4.000000, 4.000000, 0.000000)
add_sat r3.xyz, r3.xyzx, l(-0.250000, -0.250000, -0.250000, 0.000000)
mad r3.xyz, cb5[1].xyzx, r4.xyzx, r3.xyzx
add r0.xyz, r0.xyzx, r3.xyzx
add r3.xyz, -r0.xyzx, cb5[4].xyzx
mov_sat r4.xy, cb5[5].ywyy
mad o0.xyz, r4.yyyy, r3.xyzx, r0.xyzx
ge r0.x, cb5[5].x, l(0.000000)
ge r0.y, l(0.050000), cb5[1].w
and r0.x, r0.y, r0.x
add r0.y, l(128.500000), cb5[5].x
mul r0.y, r0.y, l(0.00390625000)
movc r0.xy, r0.xxxx, r0.yyyy, l(0.200000,0,0,0)
mov o0.w, r0.y
lt r0.x, l(0.500000), r0.x
and o1.w, r0.x, l(0x3ea8f5c3)
mul r0.xyz, r2.yyyy, v2.xyzx
mad r0.xyz, v1.xyzx, r2.xxxx, r0.xyzx
dp2 r0.w, r2.xyxx, r2.xyxx
add r0.w, -r0.w, l(1.000000)
max r0.w, r0.w, l(0.000000)
sqrt r0.w, r0.w
mad r0.xyz, r1.xyzx, r0.wwww, r0.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r0.w, r4.x, l(-2.000000)
mad r1.x, r4.x, l(-2.000000), l(-0.200000)
mov_sat r1.y, cb5[2].x
mad_sat r1.y, cb5[2].w, r1.y, cb5[2].z
mul r1.x, r1.y, r1.x
mad r0.w, r1.x, l(-5.002501), r0.w
min r0.w, r0.w, r1.y
lt r1.x, l(0.000100), cb5[5].y
movc r0.w, r1.x, r0.w, r1.y
mad r0.w, r0.w, l(0.125000), l(0.375000)
mad_sat o1.xyz, r0.xyzx, r0.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)
add r0.x, l(0.00781250000), cb5[4].w
log r0.x, r0.x
mad_sat r0.x, r0.x, l(0.0769230798), l(0.538461566)
add r0.x, r2.z, r0.x
mul o2.y, r0.x, l(0.500000)
mov o2.x, cb5[1].w
mul o2.z, l(0.800000), cb5[5].z
mov o2.w, v0.w
ret
// Approximately 0 instruction slots used

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:54:10 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy
// SV_VERTEXID              0   x           4   VERTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyz         4     NONE   float   xyz
// TEXCOORD                 8   xyzw        5     NONE   float   xyzw
// SV_POSITION              0   xyzw        6      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb12[16], immediateIndexed
dcl_constantbuffer cb1[24], dynamicIndexed
dcl_resource_buffer (float,float,float,float) t0
dcl_resource_buffer (uint,uint,uint,uint) t1
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v3.xy
dcl_input_sgv v4.x, vertex_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_output_siv o6.xyzw, position
dcl_temps 14
umin r0.x, v4.x, cb1[4].w
ld_indexable(buffer)(float,float,float,float) r0.xyzw, r0.xxxx, t0.xyzw
max r1.x, r0.x, l(0.000000)
log r1.x, r1.x
mul r1.x, r1.x, cb0[1].x
exp r1.x, r1.x
mul r1.x, r1.x, cb0[0].x
mov r1.yz, cb0[2].xxxx
max r1.xyz, r1.xyzx, -cb0[3].xyzx
min r1.xyz, r1.xyzx, cb0[3].xyzx
mul r1.w, v0.w, l(32767.099609)
ftoi r1.w, r1.w
imax r2.x, -r1.w, r1.w
ige r2.y, r2.x, l(2048)
ilt r2.z, r1.w, l(0)
ishl r2.w, v4.x, l(1)
movc r2.w, r2.z, r2.w, v4.x
ishl r2.x, r2.x, l(3)
iadd r2.x, r2.x, l(0xffffc000)
bfi r2.x, l(3), l(0), r2.w, r2.x
ld_indexable(buffer)(uint,uint,uint,uint) r3.xyzw, r2.xxxx, t1.xyzw
movc r1.w, r2.y, r3.x, r1.w
imul null, r2.w, r1.w, l(3)
imad r4.xy, l(3, 3, 0, 0), r1.wwww, l(1, 2, 0, 0)
if_nz r2.y
  utof r3.xz, r3.zzwz
  mul r3.xz, r3.xxzx, l(0.00392156886, 0.000000, 0.00392156886, 0.000000)
  mov r5.x, cb1[r2.w + 8].w
  mov r5.y, cb1[r4.x + 8].w
  mov r5.z, cb1[r4.y + 8].w
  imul null, r1.w, r3.y, l(3)
  imad r3.yw, l(0, 3, 0, 3), r3.yyyy, l(0, 1, 0, 2)
  mul r6.xyz, r3.zzzz, cb1[r1.w + 8].xyzx
  mul r7.x, r3.z, cb1[r1.w + 8].w
  mul r7.y, r3.z, cb1[r3.y + 8].w
  mul r7.z, r3.z, cb1[r3.w + 8].w
  mul r8.xyz, r3.zzzz, cb1[r3.y + 8].xyzx
  mul r3.yzw, r3.zzzz, cb1[r3.w + 8].xxyz
  mad r6.xyz, cb1[r2.w + 8].xyzx, r3.xxxx, r6.xyzx
  mad r5.xyz, r5.xyzx, r3.xxxx, r7.xyzx
  mad r7.xyz, cb1[r4.x + 8].xyzx, r3.xxxx, r8.xyzx
  mad r3.xyz, cb1[r4.y + 8].xyzx, r3.xxxx, r3.yzwy
  if_nz r2.z
    iadd r1.w, r2.x, l(1)
    ld_indexable(buffer)(uint,uint,uint,uint) r8.xyzw, r1.wwww, t1.xyzw
    utof r2.xy, r8.zwzz
    mul r2.xy, r2.xyxx, l(0.00392156886, 0.00392156886, 0.000000, 0.000000)
    imul null, r4.zw, r8.xxxy, l(0, 0, 3, 3)
    imad r8.xyzw, l(3, 3, 3, 3), r8.xxyy, l(1, 2, 1, 2)
    mul r9.x, r2.x, cb1[r4.z + 8].w
    mul r9.y, r2.x, cb1[r8.x + 8].w
    mul r9.z, r2.x, cb1[r8.y + 8].w
    mad r10.xyz, r2.xxxx, cb1[r4.z + 8].xyzx, r6.xyzx
    add r9.xyz, r5.xyzx, r9.xyzx
    mad r11.xyz, r2.xxxx, cb1[r8.x + 8].xyzx, r7.xyzx
    mad r12.xyz, r2.xxxx, cb1[r8.y + 8].xyzx, r3.xyzx
    mul r13.x, r2.y, cb1[r4.w + 8].w
    mul r13.y, r2.y, cb1[r8.z + 8].w
    mul r13.z, r2.y, cb1[r8.w + 8].w
    mad r6.xyz, r2.yyyy, cb1[r4.w + 8].xyzx, r10.xyzx
    add r5.xyz, r9.xyzx, r13.xyzx
    mad r7.xyz, r2.yyyy, cb1[r8.z + 8].xyzx, r11.xyzx
    mad r3.xyz, r2.yyyy, cb1[r8.w + 8].xyzx, r12.xyzx
  endif
else
  mov r6.xyz, cb1[r2.w + 8].xyzx
  mov r5.x, cb1[r2.w + 8].w
  mov r5.y, cb1[r4.x + 8].w
  mov r5.z, cb1[r4.y + 8].w
  mov r7.xyz, cb1[r4.x + 8].xyzx
  mov r3.xyz, cb1[r4.y + 8].xyzx
endif
mad r2.xyz, v0.xyzx, cb1[5].wwww, cb1[5].xyzx
add r1.xyz, r1.xyzx, r2.xyzx
add r2.xyz, r5.xyzx, cb12[15].xyzx
mov r6.w, r2.x
mov r1.w, l(1.000000)
dp4 r4.x, r6.xyzw, r1.xyzw
mov r7.w, r2.y
dp4 r4.y, r7.xyzw, r1.xyzw
mov r3.w, r2.z
dp4 r4.z, r3.xyzw, r1.xyzw
mul r1.xyzw, r4.yyyy, cb12[1].xyzw
mad r1.xyzw, cb12[0].xyzw, r4.xxxx, r1.xyzw
mad r1.xyzw, cb12[2].xyzw, r4.zzzz, r1.xyzw
add o6.xyzw, r1.xyzw, cb12[14].xyzw
dp3 r1.x, v1.xyzx, v1.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, v1.xyzx
dp3 r2.x, r6.xyzx, r1.xyzx
dp3 r2.y, r7.xyzx, r1.xyzx
dp3 r2.z, r3.xyzx, r1.xyzx
dp3 r1.x, v2.xyzx, v2.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, v2.xyzx
dp3 r5.z, r6.xyzx, r1.xyzx
dp3 r5.x, r7.xyzx, r1.xyzx
dp3 r5.y, r3.xyzx, r1.xyzx
mul r1.xyz, r2.zxyz, r5.xyzx
mad r1.xyz, r2.yzxy, r5.yzxy, -r1.xyzx
mul o2.xyz, r1.xyzx, v2.wwww
mad o3.xyzw, v3.xyxy, cb1[6].xyxy, cb1[6].zwzw
mul_sat r1.x, r2.z, cb1[7].z
add_sat o0.w, r1.x, cb1[7].w
add o4.xyz, r4.xyzx, cb12[7].xyzx
mov o0.xyz, r2.xyzx
mov o1.xyzw, r5.zxyy
mov o5.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used

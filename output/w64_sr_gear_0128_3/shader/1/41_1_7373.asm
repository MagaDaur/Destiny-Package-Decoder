//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:53:52 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float
// TEXCOORD                 1   xyzw        1     NONE   float
// TEXCOORD                 2   xyzw        2     NONE   float
// TEXCOORD                 3   xyzw        3     NONE   float
// TEXCOORD                 4   xyzw        4     NONE   float
// SV_VERTEXID              0   x           5   VERTID    uint   x
// SV_InstanceID            0   x           6   INSTID    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyz         1     NONE   float   xyz
// TEXCOORD                 5      w        1     NONE   float      w
// TEXCOORD                 2   xyz         2     NONE   float   xyz
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// SV_POSITION              0   xyzw        5      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[116], immediateIndexed
dcl_constantbuffer cb12[8], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_resource_buffer (float,float,float,float) t2
dcl_input_sgv v5.x, vertex_id
dcl_output o0.xyzw
dcl_output o1.xyz
dcl_output o1.w
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output_siv o5.xyzw, position
dcl_temps 7
dcl_indexableTemp x0[4], 4
itof r0.x, v5.x
add r0.x, r0.x, l(0.500000)
mad r0.x, r0.x, l(0.500000), l(-0.500000)
round_ne r0.x, r0.x
ftoi r0.y, r0.x
ishl r0.z, r0.y, l(1)
iadd r0.z, -r0.z, v5.x
imul null, r0.w, r0.y, l(5)
itof r0.w, r0.w
add r0.w, r0.w, cb0[36].x
ftou r1.x, r0.w
ld_indexable(buffer)(float,float,float,float) r1.x, r1.xxxx, t2.wxyz
add r2.xyz, r0.wwww, l(1.000000, 3.000000, 4.000000, 0.000000)
ftou r2.xyz, r2.xyzx
ld_indexable(buffer)(float,float,float,float) r3.xyzw, r2.xxxx, t2.xyzw
ld_indexable(buffer)(float,float,float,float) o3.xyzw, r2.yyyy, t2.xyzw
ld_indexable(buffer)(float,float,float,float) r0.w, r2.zzzz, t2.xzwy
mov x0[0].y, l(0)
mov x0[1].y, l(1.000000)
mov x0[2].y, l(0)
mov x0[3].y, l(1.000000)
mul r2.xyz, r3.yyyy, cb1[1].xyzx
mad r2.xyz, cb1[0].xyzx, r3.xxxx, r2.xyzx
mad r2.xyz, cb1[2].xyzx, r3.zzzz, r2.xyzx
add r2.xyz, r2.xyzx, cb1[3].xyzx
lt r1.z, l(1.000000), cb0[112].x
if_nz r1.z
  ilt r1.z, r0.y, l(0)
  if_nz r1.z
    add r1.z, l(1.000000), cb0[36].x
    ftou r1.z, r1.z
    ld_indexable(buffer)(float,float,float,float) r4.xyz, r1.zzzz, t2.xyzw
  else
    add r1.z, l(-1.000000), cb0[112].x
    add r0.x, r0.x, -r1.z
    lt r0.x, |r0.x|, l(0.001000)
    if_nz r0.x
      iadd r0.x, r0.y, l(-1)
      itof r0.x, r0.x
      mad r0.x, r0.x, cb0[37].x, cb0[36].x
      add r0.x, r0.x, l(1.000000)
      ftou r0.x, r0.x
      ld_indexable(buffer)(float,float,float,float) r5.xyz, r0.xxxx, t2.xyzw
      mad r4.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), -r5.xyzx
    else
      iadd r0.x, r0.y, l(1)
      itof r0.x, r0.x
      mad r0.x, r0.x, cb0[37].x, cb0[36].x
      add r0.x, r0.x, l(1.000000)
      ftou r0.x, r0.x
      ld_indexable(buffer)(float,float,float,float) r4.xyz, r0.xxxx, t2.xyzw
    endif
  endif
else
  mov r4.xyz, l(0,0,0,0)
endif
mul r3.xyz, r4.yyyy, cb1[1].zxyz
mad r3.xyz, cb1[0].zxyz, r4.xxxx, r3.xyzx
mad r3.xyz, cb1[2].zxyz, r4.zzzz, r3.xyzx
add r3.xyz, r3.xyzx, cb1[3].zxyz
add r3.xyz, -r2.zxyz, r3.xyzx
dp3 r0.x, r3.xyzx, r3.xyzx
sqrt r0.x, r0.x
lt r0.x, l(0.000010), r0.x
movc r3.xyz, r0.xxxx, r3.xyzx, l(0,1.000000,0,0)
dp3 r0.x, r3.xyzx, r3.xyzx
rsq r0.x, r0.x
mul r4.xyz, r0.xxxx, r3.yzxy
add r5.xyz, -r2.xyzx, cb12[7].xyzx
mul r6.xyz, r3.xyzx, r5.yzxy
mad r3.xyz, r3.zxyz, r5.zxyz, -r6.xyzx
dp3 r0.x, r3.xyzx, r3.xyzx
rsq r0.x, r0.x
mul r3.xyz, r0.xxxx, r3.xyzx
mul r6.xyz, r3.xyzx, l(0.020000, 0.020000, 0.020000, 0.000000)
itof r0.x, r0.z
lt r0.x, r0.x, l(0.500000)
mul r3.xyz, r3.xyzx, l(-0.020000, -0.020000, -0.020000, 0.000000)
movc r3.xyz, r0.xxxx, r3.xyzx, r6.xyzx
add r2.xyz, r2.xyzx, r3.xyzx
dp3 r0.x, r4.xyzx, r5.xyzx
mad r3.xyz, -r0.xxxx, r4.xyzx, r5.xyzx
dp3 r0.x, r3.xyzx, r3.xyzx
rsq r0.x, r0.x
mul o1.xyz, r0.xxxx, r3.xyzx
mov r1.y, x0[r0.z + 0].y
mul o0.xy, r1.xyxx, l(0.350000, 1.000000, 0.000000, 0.000000)
mul r4.xyzw, r2.yyyy, cb12[1].xyzw
mad r4.xyzw, cb12[0].xyzw, r2.xxxx, r4.xyzw
mad r4.xyzw, cb12[2].xyzw, r2.zzzz, r4.xyzw
add r4.xyzw, r4.xyzw, cb12[3].xyzw
lt r0.x, l(0.999000), r3.w
movc o0.z, r0.x, l(0), cb0[115].x
add o2.xyz, -r2.xyzx, cb12[7].xyzx
mov o0.w, r4.w
mov o1.w, r0.w
mov o4.x, r1.x
mov o4.yzw, l(0,0,0,0)
mov o5.xyzw, r4.xyzw
ret
// Approximately 0 instruction slots used

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:54:10 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float
// TANGENT                  0   xyzw        2     NONE   float
// TEXCOORD                 0   xy          3     NONE   float   xy
// SV_VERTEXID              0   x           4   VERTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy
// TEXCOORD                 1   xyz         1     NONE   float   xyz
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[6], immediateIndexed
dcl_constantbuffer cb12[16], immediateIndexed
dcl_constantbuffer cb1[24], dynamicIndexed
dcl_resource_buffer (float,float,float,float) t0
dcl_resource_buffer (uint,uint,uint,uint) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input v0.xyzw
dcl_input v3.xy
dcl_input_sgv v4.x, vertex_id
dcl_output o0.xy
dcl_output o1.xyz
dcl_output_siv o2.xyzw, position
dcl_temps 13
umin r0.x, v4.x, cb1[4].w
ld_indexable(buffer)(float,float,float,float) r0.xy, r0.xxxx, t0.xzyw
mad r1.xyzw, v0.yxyz, cb1[5].wwww, cb1[5].yxyz
mul r0.z, cb0[0].x, cb0[1].x
mul r2.xz, r0.xxxx, r0.zzzz
mad r0.y, r0.y, cb0[3].x, cb0[4].x
add r0.y, r1.x, r0.y
mad r0.y, cb0[5].w, r0.y, cb0[5].z
add r0.y, r0.y, l(0.250000)
round_ne r0.z, r0.y
add r0.y, -r0.z, r0.y
mad r0.z, |r0.y|, l(-16.000000), l(8.000000)
mul r0.y, r0.z, r0.y
mad r0.z, |r0.y|, l(0.225000), l(0.775000)
mul r0.y, r0.z, r0.y
mad r0.y, cb0[5].x, r0.y, cb0[5].y
add r0.y, r0.y, cb0[2].x
mul r0.y, r0.y, cb0[1].x
mul r2.y, r0.x, r0.y
mul r0.x, v0.w, l(32767.099609)
ftoi r0.x, r0.x
imax r0.y, -r0.x, r0.x
ige r0.z, r0.y, l(2048)
ilt r0.w, r0.x, l(0)
ishl r1.x, v4.x, l(1)
movc r1.x, r0.w, r1.x, v4.x
ishl r0.y, r0.y, l(3)
iadd r0.y, r0.y, l(0xffffc000)
bfi r0.y, l(3), l(0), r1.x, r0.y
ld_indexable(buffer)(uint,uint,uint,uint) r3.xyzw, r0.yyyy, t1.xyzw
movc r0.x, r0.z, r3.x, r0.x
imul null, r1.x, r0.x, l(3)
imad r4.xy, l(3, 3, 0, 0), r0.xxxx, l(1, 2, 0, 0)
if_nz r0.z
  utof r0.xz, r3.zzwz
  mul r0.xz, r0.xxzx, l(0.00392156886, 0.000000, 0.00392156886, 0.000000)
  mov r5.x, cb1[r1.x + 8].w
  mov r5.y, cb1[r4.x + 8].w
  mov r5.z, cb1[r4.y + 8].w
  imul null, r2.w, r3.y, l(3)
  imad r3.xy, l(3, 3, 0, 0), r3.yyyy, l(1, 2, 0, 0)
  mul r6.xyz, r0.zzzz, cb1[r2.w + 8].xyzx
  mul r7.x, r0.z, cb1[r2.w + 8].w
  mul r7.y, r0.z, cb1[r3.x + 8].w
  mul r7.z, r0.z, cb1[r3.y + 8].w
  mul r3.xzw, r0.zzzz, cb1[r3.x + 8].xxyz
  mul r8.xyz, r0.zzzz, cb1[r3.y + 8].xyzx
  mad r6.xyz, cb1[r1.x + 8].xyzx, r0.xxxx, r6.xyzx
  mad r5.xyz, r5.xyzx, r0.xxxx, r7.xyzx
  mad r3.xyz, cb1[r4.x + 8].xyzx, r0.xxxx, r3.xzwx
  mad r7.xyz, cb1[r4.y + 8].xyzx, r0.xxxx, r8.xyzx
  if_nz r0.w
    iadd r0.x, r0.y, l(1)
    ld_indexable(buffer)(uint,uint,uint,uint) r0.xyzw, r0.xxxx, t1.xyzw
    utof r0.zw, r0.zzzw
    mul r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.00392156886, 0.00392156886)
    imul null, r4.zw, r0.xxxy, l(0, 0, 3, 3)
    imad r8.xyzw, l(3, 3, 3, 3), r0.xxyy, l(1, 2, 1, 2)
    mul r9.x, r0.z, cb1[r4.z + 8].w
    mul r9.y, r0.z, cb1[r8.x + 8].w
    mul r9.z, r0.z, cb1[r8.y + 8].w
    mad r10.xyz, r0.zzzz, cb1[r4.z + 8].xyzx, r6.xyzx
    add r9.xyz, r5.xyzx, r9.xyzx
    mad r11.xyz, r0.zzzz, cb1[r8.x + 8].xyzx, r3.xyzx
    mad r0.xyz, r0.zzzz, cb1[r8.y + 8].xyzx, r7.xyzx
    mul r12.x, r0.w, cb1[r4.w + 8].w
    mul r12.y, r0.w, cb1[r8.z + 8].w
    mul r12.z, r0.w, cb1[r8.w + 8].w
    mad r6.xyz, r0.wwww, cb1[r4.w + 8].xyzx, r10.xyzx
    add r5.xyz, r9.xyzx, r12.xyzx
    mad r3.xyz, r0.wwww, cb1[r8.z + 8].xyzx, r11.xyzx
    mad r7.xyz, r0.wwww, cb1[r8.w + 8].xyzx, r0.xyzx
  endif
else
  mov r6.xyz, cb1[r1.x + 8].xyzx
  mov r5.x, cb1[r1.x + 8].w
  mov r5.y, cb1[r4.x + 8].w
  mov r5.z, cb1[r4.y + 8].w
  mov r3.xyz, cb1[r4.x + 8].xyzx
  mov r7.xyz, cb1[r4.y + 8].xyzx
endif
add r0.xyz, r1.yzwy, r2.xyzx
add r1.xyz, r5.xyzx, cb12[15].xyzx
mov r6.w, r1.x
mov r0.w, l(1.000000)
dp4 r2.x, r6.xyzw, r0.xyzw
mov r3.w, r1.y
dp4 r2.y, r3.xyzw, r0.xyzw
mov r7.w, r1.z
dp4 r2.z, r7.xyzw, r0.xyzw
mul r0.xyzw, r2.yyyy, cb12[1].xyzw
mad r0.xyzw, cb12[0].xyzw, r2.xxxx, r0.xyzw
mad r0.xyzw, cb12[2].xyzw, r2.zzzz, r0.xyzw
add r0.xyzw, r0.xyzw, cb12[14].xyzw
mad o0.xy, v3.xyxx, cb1[6].xyxx, cb1[6].zwzz
add o1.xyz, r2.xyzx, cb12[7].xyzx
ld_indexable(texture2d)(float,float,float,float) r1.xyzw, l(0, 0, 0, 0), t2.xyzw
div r0.xy, r0.xyxx, r0.wwww
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), r1.zwzz
mad r0.x, r0.x, r1.z, r1.x
add r2.x, r0.x, l(-1.000000)
add r0.x, r1.y, l(-1.000000)
mad r2.y, r0.y, r1.w, -r0.x
mul o2.xy, r0.wwww, r2.xyxx
mov o2.zw, r0.zzzw
ret
// Approximately 0 instruction slots used

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:53:54 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// TEXCOORD                 5   xyzw        5     NONE   float   xyzw
// TEXCOORD                 6   xyzw        6     NONE   float   xyzw
// TEXCOORD                 7   xyzw        7     NONE   float   xyz
// TEXCOORD                 8   xyzw        8     NONE   float   xyzw
// TEXCOORD                 9   xyzw        9     NONE   float    y w
// TEXCOORD                10   xyzw       10     NONE   float   xyzw
// TEXCOORD                11   xyzw       11     NONE   float
// TEXCOORD                12   xyzw       12     NONE   float
// TEXCOORD                13   xyzw       13     NONE   float
// POSITION                 0   xyz        14     NONE   float   xyz
// POSITION                 1   xy         15     NONE   float   xy
// POSITION                 2   xyz        16     NONE   float   xyz
// SV_VERTEXID              0   x          17   VERTID    uint
// SV_InstanceID            0   x          18   INSTID    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyz         1     NONE   float   xyz
// TEXCOORD                 2   xyz         2     NONE   float   xyz
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// TEXCOORD                 5   xyzw        5     NONE   float   xyzw
// TEXCOORD                 6   xyzw        6     NONE   float   xyzw
// TEXCOORD                 7   xyzw        7     NONE   float   xyzw
// TEXCOORD                 8   xyzw        8     NONE   float   xyzw
// TEXCOORD                 9   xyzw        9     NONE   float   xyzw
// TEXCOORD                10   xyzw       10     NONE   float   xyzw
// TEXCOORD                11   xyzw       11     NONE   float   xyzw
// TEXCOORD                12   xyzw       12     NONE   float   xyzw
// TEXCOORD                30   xyz        13     NONE   float   xyz
// SV_POSITION              0   xyzw       14      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[121], immediateIndexed
dcl_constantbuffer cb12[8], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_input v6.xyzw
dcl_input v7.xyz
dcl_input v8.xyzw
dcl_input v9.yw
dcl_input v10.xyzw
dcl_input v14.xyz
dcl_input v15.xy
dcl_input v16.xyz
dcl_output o0.xyzw
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_output o9.xyzw
dcl_output o10.xyzw
dcl_output o11.xyzw
dcl_output o12.xyzw
dcl_output o13.xyz
dcl_output_siv o14.xyzw, position
dcl_temps 7
mov r0.z, cb1[1].z
mov r0.x, cb1[2].z
mov r0.y, cb1[0].z
dp3 r0.w, v6.xyzx, v6.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v6.xyzx
mul r2.xyz, r0.xyzx, r1.yzxy
mad r0.xyz, r0.zxyz, r1.zxyz, -r2.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r1.w, r0.w
lt r0.w, l(0.001000), r0.w
mul r0.xyz, r0.xyzx, r1.wwww
mov r2.x, cb1[0].y
mov r2.y, cb1[1].y
mov r2.z, cb1[2].y
movc r0.xyz, r0.wwww, r0.xyzx, r2.xyzx
mul r2.xyz, r0.yzxy, r1.zxyz
mad r2.xyz, r1.yzxy, r0.zxyz, -r2.xyzx
mad r3.xyz, v14.xyzx, cb1[4].xyzx, cb1[5].xyzx
mul r3.xyz, r3.xyzx, v8.xyzx
mul r3.xyz, r3.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000)
mul r4.xyz, r0.xyzx, r3.yyyy
mul r0.xyz, r0.xyzx, v16.yyyy
mad r0.xyz, v16.xxxx, r1.xyzx, r0.xyzx
mad r1.xyz, r3.xxxx, r1.xyzx, r4.xyzx
mad r1.xyz, r3.zzzz, r2.xyzx, r1.xyzx
mad r0.xyz, v16.zzzz, r2.xyzx, r0.xyzx
mul r0.w, v9.y, l(0.500000)
sincos r2.x, r3.x, r0.w
mul r4.xyz, r1.xyzx, r3.xxxx
mov r4.w, l(0)
mul r2.xyz, r2.xxxx, l(1.000000, 0.000000, 0.000000, 0.000000)
mul r5.xyzw, r1.yzxx, -r2.zxzx
mad r1.xyz, -r1.zxyz, -r2.zzxz, r5.xyzx
mov r1.w, -r5.w
add r1.xyzw, r4.xyzw, r1.xyzw
mul r3.yzw, r1.yyzx, r2.zzxz
mad r3.yzw, r2.zzzx, r1.zzxy, -r3.yyzw
mad r1.xyz, r3.xxxx, r1.xyzx, r3.yzwy
mad r1.xyz, r1.wwww, r2.xzzx, r1.xyzx
add r1.xyz, r1.xyzx, v7.xyzx
mul r3.yzw, r1.yyyy, cb1[1].xxyz
mad r1.xyw, cb1[0].xyxz, r1.xxxx, r3.yzyw
mad r1.xyz, cb1[2].xyzx, r1.zzzz, r1.xywx
add r1.xyz, r1.xyzx, cb1[3].xyzx
mad r4.xy, v15.xyxx, cb1[6].xyxx, cb1[6].zwzz
add r0.w, r4.y, l(-1.000000)
mad r0.w, |r0.w|, l(-0.500000), l(0.750000)
max r0.w, r0.w, l(0.000000)
add r0.w, r0.w, v10.y
mad r1.w, v2.w, r0.w, v2.z
add r1.w, r1.w, l(0.250000)
round_ne r2.w, r1.w
add r1.w, r1.w, -r2.w
mad r2.w, |r1.w|, l(-16.000000), l(8.000000)
mul r1.w, r1.w, r2.w
mad r2.w, |r1.w|, l(0.225000), l(0.775000)
mul r1.w, r1.w, r2.w
mad r1.w, v2.x, r1.w, v2.y
add r2.w, -|r4.y|, l(0.875000)
max r2.w, r2.w, l(0.000000)
log r2.w, r2.w
mul r2.w, r2.w, cb0[113].x
exp r2.w, r2.w
mul r5.x, r1.w, r2.w
mad r1.w, v1.w, r0.w, v1.z
mad r0.w, v0.w, r0.w, v0.z
add r0.w, r0.w, l(0.250000)
add r1.w, r1.w, l(0.250000)
round_ne r3.y, r1.w
add r1.w, r1.w, -r3.y
mad r3.y, |r1.w|, l(-16.000000), l(8.000000)
mul r1.w, r1.w, r3.y
mad r3.y, |r1.w|, l(0.225000), l(0.775000)
mul r1.w, r1.w, r3.y
mad r1.w, v1.x, r1.w, v1.y
mul r5.y, r2.w, r1.w
round_ne r1.w, r0.w
add r0.w, r0.w, -r1.w
mad r1.w, |r0.w|, l(-16.000000), l(8.000000)
mul r0.w, r0.w, r1.w
mad r1.w, |r0.w|, l(0.225000), l(0.775000)
mul r0.w, r0.w, r1.w
mad r0.w, v0.x, r0.w, v0.y
mul r5.z, r2.w, r0.w
add r1.xyz, r1.xyzx, r5.xyzx
mul r5.xyzw, r1.yyyy, cb12[1].xyzw
mad r5.xyzw, cb12[0].xyzw, r1.xxxx, r5.xyzw
mad r5.xyzw, cb12[2].xyzw, r1.zzzz, r5.xyzw
add o2.xyz, -r1.xyzx, cb12[7].xyzx
add r1.xyzw, r5.xyzw, cb12[3].xyzw
mov o0.w, r1.w
mul r0.w, cb0[2].y, cb0[120].x
lt r2.w, l(0.999000), v8.w
movc r4.z, r2.w, l(0), r0.w
mov o0.xyz, r4.xyzx
lt r0.w, r4.z, l(0.000001)
mul r4.xyz, r0.xyzx, r3.xxxx
mul r5.xyzw, r0.yzxx, -r2.zxzx
mad r6.xyz, -r0.zxyz, -r2.zzxz, r5.xyzx
mov r6.w, -r5.w
mov r4.w, l(0)
add r4.xyzw, r4.xyzw, r6.xyzw
mul r0.xyz, r2.zxzz, r4.yzxy
mad r0.xyz, r2.zzxz, r4.zxyz, -r0.xyzx
mad r0.xyz, r3.xxxx, r4.xyzx, r0.xyzx
mad r0.xyz, r4.wwww, r2.xyzx, r0.xyzx
mul r2.xyz, r0.yyyy, cb1[1].xyzx
mad r2.xyz, cb1[0].xyzx, r0.xxxx, r2.xyzx
mad o1.xyz, cb1[2].xyzx, r0.zzzz, r2.xyzx
mov o3.xyzw, v0.xyzw
mov o4.xyzw, v1.xyzw
mov o5.xyzw, v2.xyzw
mov o6.xyzw, v3.xyzw
mov o7.xyzw, v4.xyzw
mov o8.xyzw, v5.xyzw
mov o9.x, v6.w
mov o9.y, v9.w
mov o9.zw, l(0,0,0,0)
mov o10.xw, v10.xxxy
mov o10.yz, l(0,0,0,0)
mov o11.xyzw, l(0,0,0,0)
mov o12.xy, l(0,0,0,0)
mov o12.zw, v10.zzzw
mov o13.xyz, l(0,0,0,0)
lt r0.x, v10.w, l(0.000001)
or r0.x, r0.x, r0.w
movc o14.xyzw, r0.xxxx, l(10000.000000,10000.000000,-10000.000000,1.000000), r1.xyzw
ret
// Approximately 0 instruction slots used

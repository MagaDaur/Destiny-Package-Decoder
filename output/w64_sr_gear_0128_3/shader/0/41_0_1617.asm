//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:54:11 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyz
// TEXCOORD                 1   xyzw        1     NONE   float   xyz
// TEXCOORD                 2   xyzw        2     NONE   float   xyz
// TEXCOORD                 3   xyzw        3     NONE   float   xy
// TEXCOORD                 4   xyz         4     NONE   float
// SV_POSITION              0   xyzw        5      POS   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v0.xyz
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 4
mad r0.xy, v3.xyxx, cb4[1].xyxx, cb4[1].zwzz
mad r0.zw, v3.xxxy, cb4[2].xxxy, cb4[2].zzzw
mad r1.xy, v3.xyxx, cb4[3].xyxx, cb4[3].zwzz
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.xyxx, t5.xyzw, s2
sample_indexable(texture2d)(float,float,float,float) r0.x, r1.xyxx, t4.xyzw, s1
mad_sat r0.x, cb4[6].y, r0.x, cb4[6].x
mad r0.x, cb4[6].w, r0.x, cb4[6].z
sample_indexable(texture2d)(float,float,float,float) r0.yzw, r0.zwzz, t6.wxyz, s3
mad r0.yz, r0.yyzy, cb4[7].xxxx, cb4[7].yyyy
add_sat r0.w, r0.w, cb4[7].z
mul r1.xy, r0.yzyy, cb4[4].xxxx
mul_sat r3.xyz, r2.xyzx, l(4.000000, 4.000000, 4.000000, 0.000000)
add_sat r2.xyz, r2.xyzx, l(-0.250000, -0.250000, -0.250000, 0.000000)
mad_sat r2.xyz, cb4[5].xyzx, r3.xyzx, r2.xyzx
dp2 r0.y, r1.xyxx, r1.xyxx
add r0.y, -r0.y, l(1.000000)
max r0.y, r0.y, l(0.000000)
sqrt r1.z, r0.y
dp3 r0.y, r1.xyzx, r1.xyzx
rsq r0.y, r0.y
mul r1.xyz, r0.yyyy, r1.xyzx
min r0.y, r0.w, r2.w
mul r3.xyz, r1.yyyy, v2.xyzx
mad r1.xyw, v1.xyxz, r1.xxxx, r3.xyxz
mad r1.xyz, v0.xyzx, r1.zzzz, r1.xywx
dp3 r0.z, r1.xyzx, r1.xyzx
rsq r0.z, r0.z
mul r1.xyz, r0.zzzz, r1.xyzx
lt r0.z, l(0.000000), cb4[0].x
if_nz r0.z
  mad r0.z, r0.y, l(0.125000), l(0.375000)
  mad_sat o1.xyz, r1.xyzx, r0.zzzz, l(0.500000, 0.500000, 0.500000, 0.000000)
  add r0.z, r0.x, l(-0.500000)
  lt r0.z, r0.z, l(0.000000)
  discard_nz r0.z
  mov o0.xyz, r2.xyzx
  mov o0.w, l(0)
  mov o1.w, l(0)
  mov o2.xyzw, l(0,0.500000,0,1.000000)
else
  mul o0.xyz, r0.xxxx, r2.xyzx
  lt r0.z, cb4[0].y, l(2.000000)
  mad r0.y, r0.y, l(0.125000), l(0.375000)
  mad_sat r1.xyz, r1.xyzx, r0.yyyy, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul o1.xyz, r0.xxxx, r1.xyzx
  mad r1.xyzw, r0.xxxx, l(0.000000, 0.500000, 0.000000, -1.000000), l(0.000000, 0.000000, 0.000000, 1.000000)
  movc o2.xyzw, r0.zzzz, l(0,0,0,0), r1.xyzw
  add r0.x, -r0.x, l(1.000000)
  mov o0.w, r0.x
  mov o1.w, r0.x
endif
ret
// Approximately 0 instruction slots used

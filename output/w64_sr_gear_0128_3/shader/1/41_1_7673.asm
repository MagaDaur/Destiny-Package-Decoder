//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:53:51 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float
// TEXCOORD                 1   xyzw        1     NONE   float
// TEXCOORD                 2   xyzw        2     NONE   float
// TEXCOORD                 3   xyzw        3     NONE   float
// TEXCOORD                 4   xyzw        4     NONE   float
// TEXCOORD                 5   xyzw        5     NONE   float
// TEXCOORD                 6   xyzw        6     NONE   float
// TEXCOORD                 7   xyzw        7     NONE   float
// TEXCOORD                 8   xyzw        8     NONE   float
// TEXCOORD                 9   xyzw        9     NONE   float
// TEXCOORD                10   xyzw       10     NONE   float
// SV_VERTEXID              0   x          11   VERTID    uint   x
// SV_InstanceID            0   x          12   INSTID    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyz         1     NONE   float   xyz
// TEXCOORD                 9      w        1     NONE   float      w
// TEXCOORD                 2   xyz         2     NONE   float   xyz
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// TEXCOORD                 5   xyzw        5     NONE   float   xyzw
// TEXCOORD                 6   xyzw        6     NONE   float   xyzw
// TEXCOORD                 7   xyzw        7     NONE   float   xyzw
// TEXCOORD                 8   xyzw        8     NONE   float   xyzw
// SV_POSITION              0   xyzw        9      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[125], immediateIndexed
dcl_constantbuffer cb12[8], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_resource_buffer (float,float,float,float) t2
dcl_input_sgv v11.x, vertex_id
dcl_output o0.xyzw
dcl_output o1.xyz
dcl_output o1.w
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_output_siv o9.xyzw, position
dcl_temps 7
dcl_indexableTemp x0[4], 4
itof r0.x, v11.x
add r0.x, r0.x, l(0.500000)
mad r0.x, r0.x, l(0.500000), l(-0.500000)
round_ne r0.x, r0.x
ftoi r0.y, r0.x
ishl r0.z, r0.y, l(1)
iadd r0.z, -r0.z, v11.x
imul null, r0.w, r0.y, l(11)
itof r0.w, r0.w
add r0.w, r0.w, cb0[36].x
add r1.xyzw, r0.wwww, l(3.000000, 4.000000, 7.000000, 8.000000)
ftou r1.xyzw, r1.xyzw
ld_indexable(buffer)(float,float,float,float) r1.x, r1.xxxx, t2.wxyz
ld_indexable(buffer)(float,float,float,float) r2.xyzw, r1.yyyy, t2.xyzw
ftou r1.y, r0.w
ld_indexable(buffer)(float,float,float,float) o3.xyzw, r1.yyyy, t2.xyzw
ld_indexable(buffer)(float,float,float,float) o6.xyzw, r1.zzzz, t2.xyzw
ld_indexable(buffer)(float,float,float,float) o7.xyzw, r1.wwww, t2.xyzw
add r1.yzw, r0.wwww, l(0.000000, 1.000000, 9.000000, 6.000000)
ftou r1.yzw, r1.yyzw
ld_indexable(buffer)(float,float,float,float) o4.xyzw, r1.yyyy, t2.xyzw
ld_indexable(buffer)(float,float,float,float) r3.xyzw, r1.zzzz, t2.xyzw
ld_indexable(buffer)(float,float,float,float) r1.yzw, r1.wwww, t2.wxyz
mov x0[0].y, l(0)
mov x0[1].y, l(1.000000)
mov x0[2].y, l(0)
mov x0[3].y, l(1.000000)
mul r4.xyz, r2.yyyy, cb1[1].xyzx
mad r4.xyz, cb1[0].xyzx, r2.xxxx, r4.xyzx
mad r4.xyz, cb1[2].xyzx, r2.zzzz, r4.xyzx
add r4.xyz, r4.xyzx, cb1[3].xyzx
lt r0.w, l(1.000000), cb0[112].x
if_nz r0.w
  ilt r0.w, r0.y, l(0)
  if_nz r0.w
    add r0.w, l(4.000000), cb0[36].x
    ftou r0.w, r0.w
    ld_indexable(buffer)(float,float,float,float) r5.xyz, r0.wwww, t2.xyzw
  else
    add r0.w, l(-1.000000), cb0[112].x
    add r0.x, -r0.w, r0.x
    lt r0.x, |r0.x|, l(0.001000)
    if_nz r0.x
      iadd r0.x, r0.y, l(-1)
      itof r0.x, r0.x
      mad r0.x, r0.x, cb0[37].x, cb0[36].x
      add r0.x, r0.x, l(4.000000)
      ftou r0.x, r0.x
      ld_indexable(buffer)(float,float,float,float) r6.xyz, r0.xxxx, t2.xyzw
      mad r5.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), -r6.xyzx
    else
      iadd r0.x, r0.y, l(1)
      itof r0.x, r0.x
      mad r0.x, r0.x, cb0[37].x, cb0[36].x
      add r0.x, r0.x, l(4.000000)
      ftou r0.x, r0.x
      ld_indexable(buffer)(float,float,float,float) r5.xyz, r0.xxxx, t2.xyzw
    endif
  endif
else
  mov r5.xyz, l(0,0,0,0)
endif
mul r0.xyw, r5.yyyy, cb1[1].zxzy
mad r0.xyw, cb1[0].zxzy, r5.xxxx, r0.xyxw
mad r0.xyw, cb1[2].zxzy, r5.zzzz, r0.xyxw
add r0.xyw, r0.xyxw, cb1[3].zxzy
add r0.xyw, -r4.zxzy, r0.xyxw
dp3 r2.x, r0.xywx, r0.xywx
sqrt r2.x, r2.x
lt r2.x, l(0.000010), r2.x
movc r0.xyw, r2.xxxx, r0.xyxw, l(0,1.000000,0,0)
dp3 r2.x, r0.xywx, r0.xywx
rsq r2.x, r2.x
mul r2.xyz, r0.ywxy, r2.xxxx
add r5.xyz, -r4.xyzx, cb12[7].xyzx
mul r6.xyz, r0.xywx, r5.yzxy
mad r0.xyw, r0.wxwy, r5.zxzy, -r6.xyxz
dp3 r4.w, r0.xywx, r0.xywx
rsq r4.w, r4.w
mul r0.xyw, r0.xyxw, r4.wwww
mul r0.xyw, r3.yyyy, r0.xyxw
itof r4.w, r0.z
lt r4.w, r4.w, l(0.500000)
movc r0.xyw, r4.wwww, -r0.xyxw, r0.xyxw
add r0.xyw, r0.xyxw, r4.xyxz
dp3 r4.x, r2.xyzx, r5.xyzx
mad r4.xyz, -r4.xxxx, r2.xyzx, r5.xyzx
dp3 r4.w, r4.xyzx, r4.xyzx
rsq r4.w, r4.w
mul o1.xyz, r4.wwww, r4.xyzx
dp3 r4.x, r5.xyzx, r5.xyzx
rsq r4.y, r4.x
mul r4.yzw, r4.yyyy, r5.xxyz
dp3 r2.x, r4.yzwy, r2.xyzx
add r2.x, |r2.x|, l(-0.965925813)
mul_sat r2.x, r2.x, l(-16.773441)
mov o0.y, x0[r0.z + 0].y
mul r5.xyzw, r0.yyyy, cb12[1].xyzw
mad r5.xyzw, cb12[0].xyzw, r0.xxxx, r5.xyzw
mad r5.xyzw, cb12[2].xyzw, r0.wwww, r5.xyzw
add r5.xyzw, r5.xyzw, cb12[3].xyzw
sqrt r0.z, r4.x
add r2.y, r0.z, l(-1.000000)
add r0.z, -r0.z, l(10000.000000)
min_sat r0.z, r0.z, r2.y
mul r0.z, r2.x, r0.z
mul r0.z, r0.z, cb0[124].x
lt r2.x, l(0.999000), r2.w
movc o0.z, r2.x, l(0), r0.z
add o2.xyz, -r0.xywx, cb12[7].xyzx
mov o0.w, r5.w
mov o0.x, r1.x
mov o1.w, r3.w
mov o5.xyzw, r1.yzwx
mov o8.x, l(0)
mov o8.yzw, r3.xxyz
mov o9.xyzw, r5.xyzw
ret
// Approximately 0 instruction slots used

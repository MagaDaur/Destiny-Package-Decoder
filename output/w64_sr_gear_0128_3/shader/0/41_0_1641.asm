//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:54:10 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyz
// TEXCOORD                 2   xyz         2     NONE   float   xyz
// TEXCOORD                 3   xyzw        3     NONE   float   xy
// TEXCOORD                 4   xyz         4     NONE   float   xyz
// TEXCOORD                 8   xyzw        5     NONE   float
// SV_POSITION              0   xyzw        6      POS   float
// SV_isFrontFace           0   x           7    FFACE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[48], immediateIndexed
dcl_constantbuffer cb12[8], immediateIndexed
dcl_constantbuffer cb5[10], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xy
dcl_input_ps linear v4.xyz
dcl_input_ps_sgv v7.x, is_front_face
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 7
add r0.xyz, -v4.xyzx, cb12[7].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mad r1.xy, v3.xyxx, cb0[0].xyxx, cb0[0].zwzz
sample_indexable(texture2d)(float,float,float,float) r1.zw, r1.xyxx, t7.zwxy, s1
mad r1.zw, r1.zzzw, cb0[14].xxxx, cb0[14].yyyy
dp2 r2.x, r1.zwzz, r1.zwzz
add r2.x, -r2.x, l(1.000000)
max r2.x, r2.x, l(0.000000)
sqrt r2.x, r2.x
movc r2.y, v7.x, l(1.000000), l(-1.000000)
mul r2.yzw, r2.yyyy, v0.xxyz
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyxx, t4.xyzw, s1
mad r4.xy, v3.xyxx, cb0[1].xyxx, cb0[1].zwzz
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyxx, t5.xyzw, s2
mul_sat r5.xyz, r3.xyzx, l(4.000000, 4.000000, 4.000000, 0.000000)
add_sat r6.xyz, r3.xyzx, l(-0.250000, -0.250000, -0.250000, 0.000000)
mad r4.xyz, r4.xyzx, r5.xyzx, r6.xyzx
add r4.xyz, -r3.xyzx, r4.xyzx
mad r3.xyz, cb0[2].xxxx, r4.xyzx, r3.xyzx
mul_sat r4.xyz, r3.xyzx, l(4.000000, 4.000000, 4.000000, 0.000000)
add_sat r3.xyz, r3.xyzx, l(-0.250000, -0.250000, -0.250000, 0.000000)
mad r3.xyz, cb5[1].xyzx, r4.xyzx, r3.xyzx
mul r4.xyz, r1.wwww, v2.xyzx
mad r4.xyz, v1.xyzx, r1.zzzz, r4.xyzx
mad r4.xyz, r2.yzwy, r2.xxxx, r4.xyzx
dp3 r1.z, r4.xyzx, r4.xyzx
rsq r1.z, r1.z
mul r4.xyz, r1.zzzz, r4.xyzx
mad r0.xyz, r0.xyzx, r0.wwww, cb0[47].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t6.yzxw, s1
add r0.w, r1.z, -cb0[44].x
add r1.z, r0.w, cb5[8].z
mad r5.xyz, r1.zzzz, r2.yzwy, v2.xyzx
dp3 r1.z, r5.xyzx, r5.xyzx
rsq r1.z, r1.z
mul r5.xyz, r1.zzzz, r5.xyzx
add r0.w, r0.w, cb5[9].z
mad r6.xyz, r0.wwww, r2.yzwy, v2.xyzx
dp3 r0.w, r6.xyzx, r6.xyzx
rsq r0.w, r0.w
mul r6.xyz, r0.wwww, r6.xyzx
dp3 r0.w, r5.xyzx, r0.xyzx
mad r0.w, -r0.w, r0.w, l(1.000000)
sqrt r0.w, r0.w
log r0.w, r0.w
mul r0.w, r0.w, cb5[8].x
exp r0.w, r0.w
dp3 r0.x, r6.xyzx, r0.xyzx
mad r0.x, -r0.x, r0.x, l(1.000000)
sqrt r0.x, r0.x
log r0.x, r0.x
mul r0.x, r0.x, cb5[9].x
exp r0.x, r0.x
mov_sat r1.xy, r1.xyxx
mul r0.xy, r0.xwxx, r1.xxxx
dp3 r0.z, r2.yzwy, cb0[47].xyzx
mad_sat r0.z, cb0[45].x, r0.z, cb0[46].x
mul r0.xy, r0.zzzz, r0.xyxx
mul r0.y, r0.y, cb5[8].y
mul r0.x, r0.x, cb5[9].y
mul_sat r0.yzw, r0.yyyy, cb5[6].xxyz
mul_sat r1.xzw, r0.xxxx, cb5[7].xxyz
add r0.xyz, r0.yzwy, r1.xzwx
add r0.xyz, r0.xyzx, r3.xyzx
ne r0.w, l(0.000000), cb0[11].x
if_nz r0.w
  deriv_rtx_coarse r1.xz, v3.xxyx
  dp2 r0.w, r1.xzxx, r1.xzxx
  sqrt r0.w, r0.w
  deriv_rty_coarse r1.xz, v3.xxyx
  dp2 r1.x, r1.xzxx, r1.xzxx
  sqrt r1.x, r1.x
  max r0.w, r0.w, r1.x
  div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
  log r0.w, r0.w
  round_ni r1.x, r0.w
  exp r1.x, r1.x
  round_pi r1.z, r0.w
  exp r1.z, r1.z
  mul r1.xw, r1.xxxx, v3.xxxy
  round_ni r1.xw, r1.xxxw
  dp2 r2.x, r1.xwxx, l(17.000000, 0.100000, 0.000000, 0.000000)
  sincos r2.x, null, r2.x
  mul r2.x, r2.x, l(10000.000000)
  mad r1.x, r1.w, l(13.000000), r1.x
  sincos r1.x, null, r1.x
  add r1.x, |r1.x|, l(0.100000)
  mul r1.x, r1.x, r2.x
  mul r1.zw, r1.zzzz, v3.xxxy
  round_ni r1.zw, r1.zzzw
  dp2 r2.x, r1.zwzz, l(17.000000, 0.100000, 0.000000, 0.000000)
  sincos r2.x, null, r2.x
  mul r2.x, r2.x, l(10000.000000)
  mad r1.z, r1.w, l(13.000000), r1.z
  sincos r1.z, null, r1.z
  add r1.z, |r1.z|, l(0.100000)
  mul r1.z, r1.z, r2.x
  frc r1.xz, r1.xxzx
  frc r0.w, r0.w
  add r1.z, -r1.x, r1.z
  mad r1.x, r0.w, r1.z, r1.x
  add r1.z, -r0.w, l(1.000000)
  min r0.w, r0.w, r1.z
  mul r1.z, r1.x, r1.x
  add r1.w, r0.w, r0.w
  add r2.x, -r0.w, l(1.000000)
  mul r1.w, r1.w, r2.x
  div r1.z, r1.z, r1.w
  mad r2.y, -r0.w, l(0.500000), r1.x
  div r2.y, r2.y, r2.x
  add r2.z, -r1.x, l(1.000000)
  mul r2.z, r2.z, r2.z
  div r1.w, r2.z, r1.w
  add r1.w, -r1.w, l(1.000000)
  lt r2.x, r1.x, r2.x
  lt r0.w, r1.x, r0.w
  movc r0.w, r0.w, r1.z, r2.y
  movc r0.w, r2.x, r0.w, r1.w
  ge r1.x, l(0.500000), cb0[10].x
  add r1.z, cb0[10].x, cb0[10].x
  mad r1.z, r0.w, -r1.z, r1.z
  mad r1.w, cb0[10].x, l(2.000000), l(-2.000000)
  mad r0.w, r0.w, r1.w, l(1.000000)
  movc r0.w, r1.x, r1.z, r0.w
else
  mov r0.w, cb0[10].x
endif
add r0.w, -r0.w, r3.w
lt r0.w, r0.w, l(0.000000)
discard_nz r0.w
ge r0.w, cb5[5].x, l(0.000000)
ge r1.x, l(0.050000), cb5[1].w
and r0.w, r0.w, r1.x
add r1.x, l(128.500000), cb5[5].x
mul r1.x, r1.x, l(0.00390625000)
movc r1.xz, r0.wwww, r1.xxxx, l(0.200000,0,0,0)
mov_sat r0.w, cb5[2].x
mad_sat r0.w, cb5[2].w, r0.w, cb5[2].z
lt r1.w, l(0.000100), cb5[5].y
mov_sat r2.xy, cb5[5].ywyy
mul r2.z, r2.x, l(-2.000000)
mad r2.x, r2.x, l(-2.000000), l(-0.200000)
mul r2.x, r0.w, r2.x
mad r2.x, r2.x, l(-5.002501), r2.z
min r2.x, r0.w, r2.x
movc r0.w, r1.w, r2.x, r0.w
add r2.xzw, -r0.xxyz, cb5[4].xxyz
mad o0.xyz, r2.yyyy, r2.xzwx, r0.xyzx
mad r0.x, r0.w, l(0.125000), l(0.375000)
mad_sat o1.xyz, r4.xyzx, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)
lt r0.x, l(0.500000), r1.x
and o1.w, r0.x, l(0x3ea8f5c3)
add r0.x, l(0.00781250000), cb5[4].w
log r0.x, r0.x
mad_sat r0.x, r0.x, l(0.0769230798), l(0.538461566)
add r0.x, r1.y, r0.x
mul o2.y, r0.x, l(0.500000)
mov o0.w, r1.z
mov o2.x, cb5[1].w
mul o2.z, l(0.800000), cb5[5].z
mov o2.w, v0.w
ret
// Approximately 0 instruction slots used

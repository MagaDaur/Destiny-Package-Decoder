//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:54:02 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float
// TEXCOORD                 2   xyz         2     NONE   float
// TEXCOORD                 3   xyzw        3     NONE   float   xy
// TEXCOORD                 4   xyz         4     NONE   float
// SV_POSITION              0   xyzw        5      POS   float
// SV_isFrontFace           0   x           6    FFACE    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v3.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 3
dp3 r0.x, v0.xyzx, v0.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v0.xyzx
ne r0.w, l(0.000000), cb0[2].x
if_nz r0.w
  deriv_rtx_coarse r1.xy, v3.xyxx
  dp2 r0.w, r1.xyxx, r1.xyxx
  sqrt r0.w, r0.w
  deriv_rty_coarse r1.xy, v3.xyxx
  dp2 r1.x, r1.xyxx, r1.xyxx
  sqrt r1.x, r1.x
  max r0.w, r0.w, r1.x
  div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
  log r0.w, r0.w
  round_ni r1.x, r0.w
  exp r1.x, r1.x
  round_pi r1.y, r0.w
  exp r1.y, r1.y
  mul r1.xz, r1.xxxx, v3.xxyx
  round_ni r1.xz, r1.xxzx
  dp2 r1.w, r1.xzxx, l(17.000000, 0.100000, 0.000000, 0.000000)
  sincos r1.w, null, r1.w
  mul r1.w, r1.w, l(10000.000000)
  mad r1.x, r1.z, l(13.000000), r1.x
  sincos r1.x, null, r1.x
  add r1.x, |r1.x|, l(0.100000)
  mul r1.x, r1.x, r1.w
  mul r1.yz, r1.yyyy, v3.xxyx
  round_ni r1.yz, r1.yyzy
  dp2 r1.w, r1.yzyy, l(17.000000, 0.100000, 0.000000, 0.000000)
  sincos r1.w, null, r1.w
  mul r1.w, r1.w, l(10000.000000)
  mad r1.y, r1.z, l(13.000000), r1.y
  sincos r1.y, null, r1.y
  add r1.y, |r1.y|, l(0.100000)
  mul r1.y, r1.y, r1.w
  frc r1.xy, r1.xyxx
  frc r0.w, r0.w
  add r1.y, -r1.x, r1.y
  mad r1.x, r0.w, r1.y, r1.x
  add r1.y, -r0.w, l(1.000000)
  min r0.w, r0.w, r1.y
  add r1.z, r0.w, r0.w
  add r1.w, -r0.w, l(1.000000)
  mul r1.yz, r1.xxwx, r1.xxzx
  div r1.y, r1.y, r1.z
  mad r2.x, -r0.w, l(0.500000), r1.x
  div r2.x, r2.x, r1.w
  add r2.y, -r1.x, l(1.000000)
  mul r2.y, r2.y, r2.y
  div r1.z, r2.y, r1.z
  add r1.z, -r1.z, l(1.000000)
  lt r1.w, r1.x, r1.w
  lt r0.w, r1.x, r0.w
  movc r0.w, r0.w, r1.y, r2.x
  movc r0.w, r1.w, r0.w, r1.z
  ge r1.x, l(0.500000), cb0[1].x
  add r1.y, cb0[1].x, cb0[1].x
  mad r1.y, r0.w, -r1.y, r1.y
  mad r1.z, cb0[1].x, l(2.000000), l(-2.000000)
  mad r0.w, r0.w, r1.z, l(1.000000)
  movc r0.w, r1.x, r1.y, r0.w
else
  mov r0.w, cb0[1].x
endif
lt r0.w, -r0.w, l(0.000000)
discard_nz r0.w
mad_sat o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.xyz, cb0[0].xyzx
mov o0.w, l(0)
mov o1.w, l(0)
mov o2.xyz, l(0,0.500000,0,0)
mov o2.w, v0.w
ret
// Approximately 0 instruction slots used

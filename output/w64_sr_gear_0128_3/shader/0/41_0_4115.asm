//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:54:02 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy
// TEXCOORD                 1   xyz         1     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_input_ps linear v0.xy
dcl_output o0.xyzw
dcl_temps 2
ne r0.x, l(0.000000), cb0[2].x
if_nz r0.x
  deriv_rtx_coarse r0.xy, v0.xyxx
  dp2 r0.x, r0.xyxx, r0.xyxx
  deriv_rty_coarse r0.yz, v0.xxyx
  dp2 r0.y, r0.yzyy, r0.yzyy
  sqrt r0.xy, r0.xyxx
  max r0.x, r0.y, r0.x
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  log r0.x, r0.x
  round_ni r0.y, r0.x
  exp r0.y, r0.y
  round_pi r0.z, r0.x
  exp r0.z, r0.z
  mul r0.yw, r0.yyyy, v0.xxxy
  round_ni r0.yw, r0.yyyw
  dp2 r1.x, r0.ywyy, l(17.000000, 0.100000, 0.000000, 0.000000)
  sincos r1.x, null, r1.x
  mul r1.x, r1.x, l(10000.000000)
  mad r0.y, r0.w, l(13.000000), r0.y
  sincos r0.y, null, r0.y
  add r0.y, |r0.y|, l(0.100000)
  mul r0.y, r0.y, r1.x
  mul r0.zw, r0.zzzz, v0.xxxy
  round_ni r0.zw, r0.zzzw
  dp2 r1.x, r0.zwzz, l(17.000000, 0.100000, 0.000000, 0.000000)
  sincos r1.x, null, r1.x
  mul r1.x, r1.x, l(10000.000000)
  mad r0.z, r0.w, l(13.000000), r0.z
  sincos r0.z, null, r0.z
  add r0.z, |r0.z|, l(0.100000)
  mul r0.z, r0.z, r1.x
  frc r0.xyz, r0.xyzx
  add r0.z, -r0.y, r0.z
  mad r0.y, r0.x, r0.z, r0.y
  add r0.z, -r0.x, l(1.000000)
  min r0.x, r0.z, r0.x
  mul r0.z, r0.y, r0.y
  add r0.w, r0.x, r0.x
  add r1.xz, -r0.xxyx, l(1.000000, 0.000000, 1.000000, 0.000000)
  mul r0.w, r0.w, r1.x
  div r0.z, r0.z, r0.w
  mad r1.y, -r0.x, l(0.500000), r0.y
  div r1.y, r1.y, r1.x
  mul r1.z, r1.z, r1.z
  div r0.w, r1.z, r0.w
  add r0.w, -r0.w, l(1.000000)
  lt r1.x, r0.y, r1.x
  lt r0.x, r0.y, r0.x
  movc r0.x, r0.x, r0.z, r1.y
  movc r0.x, r1.x, r0.x, r0.w
  ge r0.y, l(0.500000), cb0[1].x
  add r0.z, cb0[1].x, cb0[1].x
  mad r0.z, r0.x, -r0.z, r0.z
  mad r0.w, cb0[1].x, l(2.000000), l(-2.000000)
  mad r0.x, r0.x, r0.w, l(1.000000)
  movc r0.x, r0.y, r0.z, r0.x
else
  mov r0.x, cb0[1].x
endif
lt r0.x, -r0.x, l(0.000000)
discard_nz r0.x
mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
ret
// Approximately 0 instruction slots used

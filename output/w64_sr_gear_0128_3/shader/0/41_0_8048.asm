//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:53:49 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyz
// TEXCOORD                 2   xyzw        2     NONE   float   xyz
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyz         4     NONE   float   xyz
// TEXCOORD                 8   xyzw        5     NONE   float
// SV_POSITION              0   xyzw        6      POS   float
// SV_isFrontFace           0   x           7    FFACE    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[24], immediateIndexed
dcl_constantbuffer cb12[8], immediateIndexed
dcl_constantbuffer cb7[63], dynamicIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t9
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 10
add r0.xyz, -v4.xyzx, cb12[7].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r1.x, r0.w
mul r0.xyz, r0.xyzx, r1.xxxx
sqrt r0.w, r0.w
dp3 r0.x, r0.xyzx, v0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v3.xyxx, t3.xyzw, s5
add r0.y, -r1.z, r1.y
lt r0.y, r0.y, l(0.00470588217)
movc r0.y, r0.y, r1.y, r1.z
deriv_rtx_coarse r2.xy, r1.xyxx
deriv_rtx_coarse r2.z, r0.y
deriv_rty_coarse r3.xy, r1.xyxx
deriv_rty_coarse r3.z, r0.y
mul r1.zw, r2.yyyz, r2.xxxx
mul r2.xy, r3.yzyy, r3.xxxx
lt r2.zw, |r2.xxxy|, |r1.zzzw|
movc r1.zw, r2.zzzw, r1.zzzw, r2.xxxy
add r0.z, r1.x, l(-0.500000)
lt r0.z, |r0.z|, l(0.00470588217)
add r2.x, r1.y, r1.x
add r2.x, r2.x, l(-1.000000)
lt r2.x, |r2.x|, l(0.00588235306)
lt r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
and r1.z, r1.z, r2.x
add r2.x, -r1.y, l(1.000000)
movc r1.z, r1.z, r2.x, r1.x
add r2.x, r0.y, r1.z
add r2.x, r2.x, l(-1.000000)
lt r2.x, |r2.x|, l(0.00588235306)
and r1.w, r1.w, r2.x
add r2.x, -r0.y, l(1.000000)
movc r1.z, r1.w, r2.x, r1.z
movc r0.z, r0.z, r1.z, r1.x
ge r0.y, r0.y, l(0.500000)
if_nz r0.y
  mad r1.xz, v3.zzwz, cb7[7].xxyx, cb7[7].zzwz
  sample_indexable(texture2d)(float,float,float,float) r0.y, r1.xzxx, t9.xzyw, s1
  add_sat r0.y, r0.y, cb7[8].z
  mov r1.x, l(4)
else
  ge r1.y, r1.y, l(0.500000)
  if_nz r1.y
    mad r1.yz, v3.zzwz, cb7[4].xxyx, cb7[4].zzwz
    sample_indexable(texture2d)(float,float,float,float) r1.y, r1.yzyy, t7.xzyw, s1
    add_sat r0.y, r1.y, cb7[5].z
    mov r1.x, l(2)
  else
    mad r1.yz, v3.zzwz, cb7[1].xxyx, cb7[1].zzwz
    sample_indexable(texture2d)(float,float,float,float) r1.y, r1.yzyy, t5.xzyw, s1
    add_sat r0.y, r1.y, cb7[2].z
    mov r1.x, l(0)
  endif
endif
ge r0.z, r0.z, l(0.500000)
iadd r1.y, r1.x, l(1)
movc r0.z, r0.z, r1.y, r1.x
imul null, r0.z, r0.z, l(9)
mov_sat r1.xy, cb7[r0.z + 11].ywyy
mov_sat r1.zw, cb7[r0.z + 12].yyyz
mov_sat r2.x, cb7[r0.z + 17].w
sample_indexable(texture2d)(float,float,float,float) r2.yzw, v3.xyxx, t0.wxyz, s2
sample_indexable(texture2d)(float,float,float,float) r3.xy, v3.xyxx, t1.xyzw, s3
mad r3.xy, r3.xyxx, cb0[23].xxxx, cb0[23].yyyy
sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v3.xyxx, t2.xyzw, s4
ge r3.z, r4.w, l(0.156862751)
and r3.w, r3.z, l(0x3f800000)
add r5.xy, r4.wzww, l(-0.188235298, -0.156862751, 0.000000, 0.000000)
mul_sat r5.xy, r5.xyxx, l(1.231884, 1.18604648, 0.000000, 0.000000)
mul_sat r6.xy, r4.zwzz, l(7.968750, 7.968750, 0.000000, 0.000000)
mad_sat r4.z, cb7[r0.z + 15].y, r5.x, cb7[r0.z + 15].x
mad_sat r4.z, cb7[r0.z + 15].w, r4.z, cb7[r0.z + 15].z
add r4.w, l(128.500000), cb0[7].x
mul r4.w, r4.w, l(0.00390625000)
ge r5.x, l(0.050000), r6.y
movc r4.w, r5.x, r4.w, l(-1.000000)
mad_sat r5.x, cb7[r0.z + 13].y, r4.y, cb7[r0.z + 13].x
mad_sat r5.x, cb7[r0.z + 13].w, r5.x, cb7[r0.z + 13].z
mul_sat r7.xyz, r2.yzwy, l(4.000000, 4.000000, 4.000000, 0.000000)
add_sat r8.xyz, r2.yzwy, l(-0.250000, -0.250000, -0.250000, 0.000000)
mad_sat r9.xyz, cb7[r0.z + 9].xyzx, r7.xyzx, r8.xyzx
add r0.y, r0.y, l(-1.000000)
mul r0.y, r0.y, r1.x
mad_sat r7.xyz, cb7[r0.z + 14].xyzx, r7.xyzx, r8.xyzx
add r8.xyz, -r7.xyzx, r9.xyzx
mad r7.xyz, r4.zzzz, r8.xyzx, r7.xyzx
mov r6.z, r4.y
add r1.x, r5.x, -r6.z
mad r7.w, r4.z, r1.x, r4.y
add r1.x, r1.y, -r2.x
mad r8.y, r4.z, r1.x, r2.x
mad r0.y, r4.z, r0.y, l(1.000000)
mul r0.x, r0.x, r0.x
mad_sat r0.x, r0.x, cb0[22].x, cb0[22].y
mul_sat r9.xyzw, r7.xyzw, l(4.000000, 4.000000, 4.000000, 4.000000)
add_sat r7.xyzw, r7.xyzw, l(-0.250000, -0.250000, -0.250000, -0.250000)
mad r7.xyzw, r0.xxxx, r9.xyzw, r7.xyzw
add r0.x, l(128.500000), cb7[r0.z + 12].x
mul r0.x, r0.x, l(0.00390625000)
ge r1.x, l(0.050000), r1.y
movc r0.x, r1.x, r0.x, l(-1.000000)
min r0.y, r0.y, r7.w
lt r1.x, l(0.000100), r1.z
mul r1.y, r1.z, l(-2.000000)
mad r1.z, r1.z, l(-2.000000), l(-0.200000)
mul r1.z, r0.y, r1.z
mad r1.y, r1.z, l(-5.002501), r1.y
min r1.y, r0.y, r1.y
movc r8.x, r1.x, r1.y, r0.y
add r1.xyz, -r2.yzwy, r7.xyzx
mad r1.xyz, r3.wwww, r1.xyzx, r2.yzwy
mad r2.xy, r4.zzzz, r3.xyxx, -r3.xyxx
mad r2.xy, r3.wwww, r2.xyxx, r3.xyxx
add r3.xy, -r6.zyzz, r8.xyxx
mad r3.xy, r3.wwww, r3.xyxx, r6.zyzz
mul r0.y, r1.w, r3.w
movc o0.w, r3.z, r0.x, r4.w
ne r0.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb7[r0.z + 10].w
and r5.xzw, r0.xxxx, cb7[r0.z + 10].xxyz
mul r0.x, r5.y, cb0[21].x
mul r5.xyz, r5.xzwx, r0.xxxx
mul r5.xyz, r3.wwww, r5.xyzx
mul r6.yzw, r4.zzzz, r5.xxyz
mad r4.yzw, r5.xxyz, r4.zzzz, r1.xxyz
max r0.x, r4.z, r4.y
max r0.x, r4.w, r0.x
add_sat r0.x, r0.x, l(-1.000000)
add r0.x, -r0.x, l(1.000000)
mad r1.xyz, r1.xyzx, r0.xxxx, r6.yzwy
max r0.x, r1.y, r1.x
max r0.x, r1.z, r0.x
max r0.x, r0.x, l(1.000000)
div r1.xyz, r1.xyzx, r0.xxxx
max r0.x, r6.z, r6.y
max r0.x, r6.w, r0.x
dp2 r0.z, r2.xyxx, r2.xyxx
add r0.z, -r0.z, l(1.000000)
max r0.z, r0.z, l(0.000000)
sqrt r2.z, r0.z
dp3 r0.z, r2.xyzx, r2.xyzx
rsq r0.z, r0.z
mul r2.xyz, r0.zzzz, r2.xyzx
mul r4.yzw, r2.yyyy, v2.xxyz
mad r2.xyw, v1.xyxz, r2.xxxx, r4.yzyw
mad r2.xyz, v0.xyzx, r2.zzzz, r2.xywx
dp3 r0.z, r2.xyzx, r2.xyzx
rsq r0.z, r0.z
mul r2.xyz, r0.zzzz, r2.xyzx
ne r0.z, l(0.000000), cb0[9].x
if_nz r0.z
  deriv_rtx_coarse r3.zw, v3.xxxy
  dp2 r0.z, r3.zwzz, r3.zwzz
  sqrt r0.z, r0.z
  deriv_rty_coarse r3.zw, v3.xxxy
  dp2 r1.w, r3.zwzz, r3.zwzz
  sqrt r1.w, r1.w
  max r0.z, r0.z, r1.w
  div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
  log r0.z, r0.z
  round_ni r1.w, r0.z
  exp r1.w, r1.w
  round_pi r2.w, r0.z
  exp r2.w, r2.w
  mul r3.zw, r1.wwww, v3.xxxy
  round_ni r3.zw, r3.zzzw
  dp2 r1.w, r3.zwzz, l(17.000000, 0.100000, 0.000000, 0.000000)
  sincos r1.w, null, r1.w
  mul r1.w, r1.w, l(10000.000000)
  mad r3.z, r3.w, l(13.000000), r3.z
  sincos r3.z, null, r3.z
  add r3.z, |r3.z|, l(0.100000)
  mul r1.w, r1.w, r3.z
  frc r1.w, r1.w
  mul r3.zw, r2.wwww, v3.xxxy
  round_ni r3.zw, r3.zzzw
  dp2 r2.w, r3.zwzz, l(17.000000, 0.100000, 0.000000, 0.000000)
  sincos r2.w, null, r2.w
  mul r2.w, r2.w, l(10000.000000)
  mad r3.z, r3.w, l(13.000000), r3.z
  sincos r3.z, null, r3.z
  add r3.z, |r3.z|, l(0.100000)
  mul r2.w, r2.w, r3.z
  frc r2.w, r2.w
  frc r0.z, r0.z
  add r2.w, -r1.w, r2.w
  mad r1.w, r0.z, r2.w, r1.w
  add r2.w, -r0.z, l(1.000000)
  min r0.z, r0.z, r2.w
  mul r2.w, r1.w, r1.w
  add r3.z, r0.z, r0.z
  add r3.w, -r0.z, l(1.000000)
  mul r3.z, r3.w, r3.z
  div r2.w, r2.w, r3.z
  mad r4.y, -r0.z, l(0.500000), r1.w
  div r4.y, r4.y, r3.w
  add r4.z, -r1.w, l(1.000000)
  mul r4.z, r4.z, r4.z
  div r3.z, r4.z, r3.z
  add r3.z, -r3.z, l(1.000000)
  lt r3.w, r1.w, r3.w
  lt r0.z, r1.w, r0.z
  movc r0.z, r0.z, r2.w, r4.y
  movc r0.z, r3.w, r0.z, r3.z
  ge r1.w, l(0.500000), cb0[8].x
  add r2.w, cb0[8].x, cb0[8].x
  mad r2.w, r0.z, -r2.w, r2.w
  mad r3.z, cb0[8].x, l(2.000000), l(-2.000000)
  mad r0.z, r0.z, r3.z, l(1.000000)
  movc r0.z, r1.w, r2.w, r0.z
else
  mov r0.z, cb0[8].x
endif
add r0.z, -r0.z, r6.x
lt r0.z, r0.z, l(0.000000)
discard_nz r0.z
mov_sat r0.z, cb0[19].x
dp3 r1.w, v0.xyzx, v0.xyzx
rsq r1.w, r1.w
mul r4.yzw, r1.wwww, v0.xxyz
dp3 r1.w, cb0[12].xyzx, r4.yzwy
add r2.w, -cb0[10].x, cb0[11].x
mad_sat r1.w, r1.w, r2.w, cb0[10].x
add r2.w, v4.z, -cb0[13].z
mul r2.w, r2.w, cb0[14].x
max r2.w, r2.w, l(0.000000)
log r2.w, r2.w
mul r2.w, r2.w, cb0[15].x
exp r2.w, r2.w
mul_sat r2.w, r2.w, cb0[16].x
mul r1.w, r1.w, r2.w
mad_sat r0.w, r0.w, cb0[17].x, cb0[17].y
mul r0.w, r0.w, r1.w
dp3 r1.w, r1.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
max r1.w, r1.w, l(0.000100)
log r1.w, r1.w
mul r1.w, r1.w, -cb0[18].x
exp r1.w, r1.w
mul r0.w, r0.w, r1.w
add o2.w, r0.z, v0.w
mad r0.x, r0.w, cb0[20].x, r0.x
mad r0.z, r3.x, l(0.125000), l(0.375000)
mad_sat o1.xyz, r2.xyzx, r0.zzzz, l(0.500000, 0.500000, 0.500000, 0.000000)
add r0.x, r0.x, l(0.00781250000)
log r0.x, r0.x
mad_sat r0.x, r0.x, l(0.0769230798), l(0.538461566)
mov_sat r4.x, r4.x
add r0.x, r0.x, r4.x
mul o2.yz, r0.xxyx, l(0.000000, 0.500000, 0.800000, 0.000000)
mov o0.xyz, r1.xyzx
mov o1.w, l(0)
mov o2.x, r3.y
ret
// Approximately 0 instruction slots used

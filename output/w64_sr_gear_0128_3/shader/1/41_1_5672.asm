//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:53:58 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float
// TANGENT                  0   xyzw        2     NONE   float
// TEXCOORD                 0   xy          3     NONE   float
// SV_VERTEXID              0   x           4   VERTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[5], immediateIndexed
dcl_constantbuffer cb12[16], immediateIndexed
dcl_constantbuffer cb1[24], dynamicIndexed
dcl_resource_buffer (float,float,float,float) t0
dcl_resource_buffer (uint,uint,uint,uint) t1
dcl_input v0.xyzw
dcl_input_sgv v4.x, vertex_id
dcl_output_siv o0.xyzw, position
dcl_temps 14
umin r0.x, v4.x, cb1[4].w
ld_indexable(buffer)(float,float,float,float) r0.x, r0.xxxx, t0.xyzw
mul r0.y, r0.x, cb0[0].x
mad r0.x, cb0[1].y, r0.x, cb0[1].x
add r0.x, r0.x, cb0[2].x
mad r0.z, cb0[3].w, r0.x, cb0[3].z
add r0.z, r0.z, l(0.250000)
round_ne r0.w, r0.z
add r0.z, -r0.w, r0.z
mad r0.w, |r0.z|, l(-16.000000), l(8.000000)
mul r0.z, r0.w, r0.z
mad r0.w, |r0.z|, l(0.225000), l(0.775000)
mul r0.z, r0.w, r0.z
mad r1.x, cb0[3].x, r0.z, cb0[3].y
mad r0.x, cb0[4].w, r0.x, cb0[4].z
add r0.x, r0.x, l(0.250000)
round_ne r0.z, r0.x
add r0.x, -r0.z, r0.x
mad r0.z, |r0.x|, l(-16.000000), l(8.000000)
mul r0.x, r0.z, r0.x
mad r0.z, |r0.x|, l(0.225000), l(0.775000)
mul r0.x, r0.z, r0.x
mad r1.y, cb0[4].x, r0.x, cb0[4].y
mov r1.z, l(0)
mul r0.x, v0.w, l(32767.099609)
ftoi r0.x, r0.x
imax r0.z, -r0.x, r0.x
ige r0.w, r0.z, l(2048)
ilt r1.w, r0.x, l(0)
ishl r2.x, v4.x, l(1)
movc r2.x, r1.w, r2.x, v4.x
ishl r0.z, r0.z, l(3)
iadd r0.z, r0.z, l(0xffffc000)
bfi r0.z, l(3), l(0), r2.x, r0.z
ld_indexable(buffer)(uint,uint,uint,uint) r2.xyzw, r0.zzzz, t1.xyzw
movc r0.x, r0.w, r2.x, r0.x
imul null, r2.x, r0.x, l(3)
imad r3.xy, l(3, 3, 0, 0), r0.xxxx, l(1, 2, 0, 0)
if_nz r0.w
  utof r0.xw, r2.zzzw
  mul r0.xw, r0.xxxw, l(0.00392156886, 0.000000, 0.000000, 0.00392156886)
  mov r4.x, cb1[r2.x + 8].w
  mov r4.y, cb1[r3.x + 8].w
  mov r4.z, cb1[r3.y + 8].w
  imul null, r2.z, r2.y, l(3)
  imad r2.yw, l(0, 3, 0, 3), r2.yyyy, l(0, 1, 0, 2)
  mul r5.xyz, r0.wwww, cb1[r2.z + 8].xyzx
  mul r6.x, r0.w, cb1[r2.z + 8].w
  mul r6.y, r0.w, cb1[r2.y + 8].w
  mul r6.z, r0.w, cb1[r2.w + 8].w
  mul r7.xyz, r0.wwww, cb1[r2.y + 8].xyzx
  mul r2.yzw, r0.wwww, cb1[r2.w + 8].xxyz
  mad r5.xyz, cb1[r2.x + 8].xyzx, r0.xxxx, r5.xyzx
  mad r4.xyz, r4.xyzx, r0.xxxx, r6.xyzx
  mad r6.xyz, cb1[r3.x + 8].xyzx, r0.xxxx, r7.xyzx
  mad r7.xyz, cb1[r3.y + 8].xyzx, r0.xxxx, r2.yzwy
  if_nz r1.w
    iadd r0.x, r0.z, l(1)
    ld_indexable(buffer)(uint,uint,uint,uint) r8.xyzw, r0.xxxx, t1.xyzw
    utof r0.xz, r8.zzwz
    mul r0.xz, r0.xxzx, l(0.00392156886, 0.000000, 0.00392156886, 0.000000)
    imul null, r2.yz, r8.xxyx, l(0, 3, 3, 0)
    imad r8.xyzw, l(3, 3, 3, 3), r8.xxyy, l(1, 2, 1, 2)
    mul r9.x, r0.x, cb1[r2.y + 8].w
    mul r9.y, r0.x, cb1[r8.x + 8].w
    mul r9.z, r0.x, cb1[r8.y + 8].w
    mad r10.xyz, r0.xxxx, cb1[r2.y + 8].xyzx, r5.xyzx
    add r9.xyz, r4.xyzx, r9.xyzx
    mad r11.xyz, r0.xxxx, cb1[r8.x + 8].xyzx, r6.xyzx
    mad r12.xyz, r0.xxxx, cb1[r8.y + 8].xyzx, r7.xyzx
    mul r13.x, r0.z, cb1[r2.z + 8].w
    mul r13.y, r0.z, cb1[r8.z + 8].w
    mul r13.z, r0.z, cb1[r8.w + 8].w
    mad r5.xyz, r0.zzzz, cb1[r2.z + 8].xyzx, r10.xyzx
    add r4.xyz, r9.xyzx, r13.xyzx
    mad r6.xyz, r0.zzzz, cb1[r8.z + 8].xyzx, r11.xyzx
    mad r7.xyz, r0.zzzz, cb1[r8.w + 8].xyzx, r12.xyzx
  endif
else
  mov r5.xyz, cb1[r2.x + 8].xyzx
  mov r4.x, cb1[r2.x + 8].w
  mov r4.y, cb1[r3.x + 8].w
  mov r4.z, cb1[r3.y + 8].w
  mov r6.xyz, cb1[r3.x + 8].xyzx
  mov r7.xyz, cb1[r3.y + 8].xyzx
endif
mad r0.xzw, v0.xxyz, cb1[5].wwww, cb1[5].xxyz
mad r0.xyz, r0.yyyy, r1.xyzx, r0.xzwx
add r1.xyz, r4.xyzx, cb12[15].xyzx
mov r5.w, r1.x
mov r0.w, l(1.000000)
dp4 r1.x, r5.xyzw, r0.xyzw
mov r6.w, r1.y
dp4 r1.y, r6.xyzw, r0.xyzw
mov r7.w, r1.z
dp4 r0.x, r7.xyzw, r0.xyzw
mul r2.xyzw, r1.yyyy, cb12[1].xyzw
mad r1.xyzw, cb12[0].xyzw, r1.xxxx, r2.xyzw
mad r0.xyzw, cb12[2].xyzw, r0.xxxx, r1.xyzw
add o0.xyzw, r0.xyzw, cb12[14].xyzw
ret
// Approximately 0 instruction slots used

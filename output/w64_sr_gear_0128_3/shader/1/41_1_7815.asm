//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:53:50 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float
// TEXCOORD                 1   xyzw        1     NONE   float
// TEXCOORD                 2   xyzw        2     NONE   float
// TEXCOORD                 3   xyzw        3     NONE   float
// TEXCOORD                 4   xyzw        4     NONE   float
// TEXCOORD                 5   xyzw        5     NONE   float
// TEXCOORD                 6   xyzw        6     NONE   float
// TEXCOORD                 7   xyzw        7     NONE   float
// TEXCOORD                 8   xyzw        8     NONE   float
// TEXCOORD                 9   xyzw        9     NONE   float
// SV_VERTEXID              0   x          10   VERTID    uint   x
// SV_InstanceID            0   x          11   INSTID    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyz         1     NONE   float   xyz
// TEXCOORD                 2   xyz         2     NONE   float   xyz
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// TEXCOORD                 5   xyzw        5     NONE   float   xyzw
// TEXCOORD                 6   xyzw        6     NONE   float   xyzw
// TEXCOORD                 7   xyzw        7     NONE   float   xyzw
// TEXCOORD                 8   xyzw        8     NONE   float   xyzw
// TEXCOORD                 9   xy          9     NONE   float   xy
// SV_POSITION              0   xyzw       10      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[137], immediateIndexed
dcl_constantbuffer cb12[8], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_resource_buffer (float,float,float,float) t2
dcl_input_sgv v10.x, vertex_id
dcl_output o0.xyzw
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_output o9.xy
dcl_output_siv o10.xyzw, position
dcl_temps 8
dcl_indexableTemp x0[4], 4
itof r0.x, v10.x
add r0.x, r0.x, l(0.500000)
mad r0.x, r0.x, l(0.500000), l(-0.500000)
round_ne r0.x, r0.x
ftoi r0.y, r0.x
ishl r0.z, r0.y, l(1)
iadd r0.z, -r0.z, v10.x
imul null, r0.w, r0.y, l(10)
itof r0.w, r0.w
add r0.w, r0.w, cb0[36].x
add r1.xyzw, r0.wwww, l(2.000000, 3.000000, 6.000000, 7.000000)
ftou r1.xyzw, r1.xyzw
ld_indexable(buffer)(float,float,float,float) r1.x, r1.xxxx, t2.wxyz
ld_indexable(buffer)(float,float,float,float) r2.xyzw, r1.yyyy, t2.xyzw
ftou r1.y, r0.w
ld_indexable(buffer)(float,float,float,float) o3.xyzw, r1.yyyy, t2.xyzw
ld_indexable(buffer)(float,float,float,float) o6.xyzw, r1.zzzz, t2.xyzw
ld_indexable(buffer)(float,float,float,float) o7.xyzw, r1.wwww, t2.xyzw
add r3.xyzw, r0.wwww, l(1.000000, 8.000000, 9.000000, 5.000000)
ftou r3.xyzw, r3.xyzw
ld_indexable(buffer)(float,float,float,float) o4.xyzw, r3.xxxx, t2.xyzw
ld_indexable(buffer)(float,float,float,float) r4.xyzw, r3.yyyy, t2.xyzw
ld_indexable(buffer)(float,float,float,float) r0.w, r3.zzzz, t2.yzwx
ld_indexable(buffer)(float,float,float,float) r1.yzw, r3.wwww, t2.wxyz
mov x0[0].y, l(0)
mov x0[1].y, l(1.000000)
mov x0[2].y, l(0)
mov x0[3].y, l(1.000000)
mul r3.xyz, r2.yyyy, cb1[1].xyzx
mad r3.xyz, cb1[0].xyzx, r2.xxxx, r3.xyzx
mad r3.xyz, cb1[2].xyzx, r2.zzzz, r3.xyzx
add r3.xyz, r3.xyzx, cb1[3].xyzx
lt r3.w, l(1.000000), cb0[112].x
if_nz r3.w
  ilt r3.w, r0.y, l(0)
  if_nz r3.w
    add r3.w, l(3.000000), cb0[36].x
    ftou r3.w, r3.w
    ld_indexable(buffer)(float,float,float,float) r5.xyz, r3.wwww, t2.xyzw
  else
    add r3.w, l(-1.000000), cb0[112].x
    add r0.x, r0.x, -r3.w
    lt r0.x, |r0.x|, l(0.001000)
    if_nz r0.x
      iadd r0.x, r0.y, l(-1)
      itof r0.x, r0.x
      mad r0.x, r0.x, cb0[37].x, cb0[36].x
      add r0.x, r0.x, l(3.000000)
      ftou r0.x, r0.x
      ld_indexable(buffer)(float,float,float,float) r6.xyz, r0.xxxx, t2.xyzw
      mad r5.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), -r6.xyzx
    else
      iadd r0.x, r0.y, l(1)
      itof r0.x, r0.x
      mad r0.x, r0.x, cb0[37].x, cb0[36].x
      add r0.x, r0.x, l(3.000000)
      ftou r0.x, r0.x
      ld_indexable(buffer)(float,float,float,float) r5.xyz, r0.xxxx, t2.xyzw
    endif
  endif
else
  mov r5.xyz, l(0,0,0,0)
endif
mul r2.xyz, r5.yyyy, cb1[1].zxyz
mad r2.xyz, cb1[0].zxyz, r5.xxxx, r2.xyzx
mad r2.xyz, cb1[2].zxyz, r5.zzzz, r2.xyzx
add r2.xyz, r2.xyzx, cb1[3].zxyz
add r2.xyz, -r3.zxyz, r2.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
sqrt r0.x, r0.x
lt r0.x, l(0.000010), r0.x
movc r2.xyz, r0.xxxx, r2.xyzx, l(0,1.000000,0,0)
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r5.xyz, r0.xxxx, r2.yzxy
add r6.xyz, -r3.xyzx, cb12[7].xyzx
mul r7.xyz, r2.xyzx, r6.yzxy
mad r2.xyz, r2.zxyz, r6.zxyz, -r7.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r2.xyz, r0.xxxx, r2.xyzx
mul r2.xyz, r4.yyyy, r2.xyzx
itof r0.x, r0.z
lt r0.x, r0.x, l(0.500000)
movc r2.xyz, r0.xxxx, -r2.xyzx, r2.xyzx
add r2.xyz, r2.xyzx, r3.xyzx
dp3 r0.x, r5.xyzx, r6.xyzx
mad r3.xyz, -r0.xxxx, r5.xyzx, r6.xyzx
dp3 r0.x, r3.xyzx, r3.xyzx
rsq r0.x, r0.x
mul o1.xyz, r0.xxxx, r3.xyzx
dp3 r0.x, r6.xyzx, r6.xyzx
rsq r0.y, r0.x
mul r3.xyz, r0.yyyy, r6.xyzx
dp3 r0.y, r3.xyzx, r5.xyzx
mul r3.x, l(0.0174532942), cb0[105].x
add r3.y, cb0[105].x, cb0[106].x
mul r3.y, r3.y, l(0.0174532942)
sincos null, r3.xy, r3.xyxx
add r0.y, |r0.y|, -r3.x
add r3.x, -r3.x, r3.y
div_sat r0.y, r0.y, r3.x
mov o0.y, x0[r0.z + 0].y
mul r3.xyzw, r2.yyyy, cb12[1].xyzw
mad r3.xyzw, cb12[0].xyzw, r2.xxxx, r3.xyzw
mad r3.xyzw, cb12[2].xyzw, r2.zzzz, r3.xyzw
add r3.xyzw, r3.xyzw, cb12[3].xyzw
sqrt r0.x, r0.x
mad r0.z, r0.x, l(0.666667), l(-0.666667)
add r0.x, -r0.x, l(10000.000000)
min_sat r0.x, r0.x, r0.z
mul r0.x, r0.y, r0.x
mul r0.x, r0.x, cb0[16].y
mul r0.x, r0.x, cb0[136].x
lt r0.y, l(0.999000), r2.w
movc o0.z, r0.y, l(0), r0.x
add o2.xyz, -r2.xyzx, cb12[7].xyzx
mov o0.w, r3.w
mov o0.x, r1.x
mov o5.xyzw, r1.yzwx
mov o8.x, l(0)
mov o8.yzw, r4.xxyz
mov o10.xyzw, r3.xyzw
mov o9.x, r4.w
mov o9.y, r0.w
ret
// Approximately 0 instruction slots used

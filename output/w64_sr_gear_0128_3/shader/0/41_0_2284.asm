//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:54:08 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyz
// TEXCOORD                 1   xyzw        1     NONE   float
// TEXCOORD                 2   xyzw        2     NONE   float
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyz         4     NONE   float   xyz
// TEXCOORD                 8   xyzw        5     NONE   float   x
// SV_POSITION              0   xyzw        6      POS   float   xy
// SV_isFrontFace           0   x           7    FFACE    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[14], immediateIndexed
dcl_constantbuffer cb13[2], immediateIndexed
dcl_constantbuffer cb12[15], immediateIndexed
dcl_constantbuffer cb8[8], immediateIndexed
dcl_constantbuffer cb7[63], dynamicIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t20
dcl_resource_texture3d (float,float,float,float) t21
dcl_input_ps linear v0.xyz
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.x
dcl_input_ps_siv linear noperspective v6.xy, position
dcl_output o0.xyzw
dcl_temps 9
mul r0.xy, v6.xyxx, cb12[12].zwzz
add r1.xyz, -v4.xyzx, cb12[14].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r1.xyzx
dp3 r0.w, r2.xyzx, v0.xyzx
mad r2.xy, v3.xyxx, cb0[3].xyxx, cb0[3].zwzz
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r2.xyxx, t3.xyzw, s4
add r1.w, -r3.z, r3.y
lt r1.w, r1.w, l(0.00470588217)
movc r1.w, r1.w, r3.y, r3.z
deriv_rtx_coarse r4.xy, r3.xyxx
deriv_rtx_coarse r4.z, r1.w
deriv_rty_coarse r5.xy, r3.xyxx
deriv_rty_coarse r5.z, r1.w
mul r2.zw, r4.yyyz, r4.xxxx
mul r3.zw, r5.yyyz, r5.xxxx
lt r4.xy, |r3.zwzz|, |r2.zwzz|
movc r2.zw, r4.xxxy, r2.zzzw, r3.zzzw
add r3.z, r3.x, l(-0.500000)
add r3.w, r3.y, r3.x
add r3.w, r3.w, l(-1.000000)
lt r3.zw, |r3.zzzw|, l(0.000000, 0.000000, 0.00470588217, 0.00588235306)
lt r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
and r2.z, r2.z, r3.w
add r3.w, -r3.y, l(1.000000)
movc r2.z, r2.z, r3.w, r3.x
add r3.w, r1.w, r2.z
add r3.w, r3.w, l(-1.000000)
lt r3.w, |r3.w|, l(0.00588235306)
and r2.w, r2.w, r3.w
add r3.w, -r1.w, l(1.000000)
movc r2.z, r2.w, r3.w, r2.z
movc r2.z, r3.z, r2.z, r3.x
ge r1.w, r1.w, l(0.500000)
if_nz r1.w
  mad r3.xz, v3.zzwz, cb7[6].xxyx, cb7[6].zzwz
  sample_indexable(texture2d)(float,float,float,float) r3.xzw, r3.xzxx, t8.xwyz, s1
  mov r1.w, l(4)
else
  ge r2.w, r3.y, l(0.500000)
  if_nz r2.w
    mad r4.xy, v3.zwzz, cb7[3].xyxx, cb7[3].zwzz
    sample_indexable(texture2d)(float,float,float,float) r3.xzw, r4.xyxx, t6.xwyz, s1
    mov r1.w, l(2)
  else
    mad r4.xy, v3.zwzz, cb7[0].xyxx, cb7[0].zwzz
    sample_indexable(texture2d)(float,float,float,float) r3.xzw, r4.xyxx, t4.xwyz, s1
    mov r1.w, l(0)
  endif
endif
ge r2.z, r2.z, l(0.500000)
iadd r2.w, r1.w, l(1)
movc r1.w, r2.z, r2.w, r1.w
imul null, r1.w, r1.w, l(9)
mov_sat r2.z, cb7[r1.w + 11].x
mov_sat r2.w, cb7[r1.w + 17].x
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r2.xyxx, t0.xyzw, s2
sample_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t2.wxyz, s3
ge r2.y, r2.x, l(0.156862751)
and r2.y, r2.y, l(0x3f800000)
add r2.x, r2.x, l(-0.188235298)
mul_sat r2.x, r2.x, l(1.231884)
mad_sat r2.x, cb7[r1.w + 15].y, r2.x, cb7[r1.w + 15].x
mad_sat r2.x, cb7[r1.w + 15].w, r2.x, cb7[r1.w + 15].z
mul_sat r5.xyz, r3.xzwx, l(4.000000, 4.000000, 4.000000, 0.000000)
add_sat r3.xyz, r3.xzwx, l(-0.250000, -0.250000, -0.250000, 0.000000)
mad_sat r6.xyz, cb7[r1.w + 9].xyzx, r5.xyzx, r3.xyzx
add r6.xyz, r6.xyzx, -cb7[r1.w + 9].xyzx
mad r6.xyz, r2.zzzz, r6.xyzx, cb7[r1.w + 9].xyzx
mul_sat r7.xyz, r4.xyzx, l(4.000000, 4.000000, 4.000000, 0.000000)
add_sat r8.xyz, r4.xyzx, l(-0.250000, -0.250000, -0.250000, 0.000000)
mad_sat r6.xyz, r6.xyzx, r7.xyzx, r8.xyzx
mad_sat r3.xyz, cb7[r1.w + 14].xyzx, r5.xyzx, r3.xyzx
add r3.xyz, r3.xyzx, -cb7[r1.w + 14].xyzx
mad r3.xyz, r2.wwww, r3.xyzx, cb7[r1.w + 14].xyzx
mad_sat r3.xyz, r3.xyzx, r7.xyzx, r8.xyzx
add r5.xyz, -r3.xyzx, r6.xyzx
mad r3.xyz, r2.xxxx, r5.xyzx, r3.xyzx
mad r3.xyz, r3.xyzx, cb0[10].xyzx, -r4.xyzx
mad r3.xyz, r2.yyyy, r3.xyzx, r4.xyzx
ne r2.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb7[r1.w + 10].w
and r4.xyz, r2.zzzz, cb7[r1.w + 10].xyzx
mul r0.w, r0.w, r0.w
mad_sat r0.w, r0.w, cb0[5].x, cb0[5].y
mad_sat r2.z, v5.x, cb0[6].x, cb0[6].y
mul r2.z, r2.z, cb0[7].x
mul r2.z, r2.z, cb0[8].x
max r2.z, r2.z, l(0.000000)
log r2.z, r2.z
mul r2.z, r2.z, cb0[9].x
exp r2.z, r2.z
mul r0.w, r0.w, r2.z
mul r4.xyz, r4.xyzx, r0.wwww
mul r4.xyz, r2.yyyy, r4.xyzx
mul r5.xyz, r2.xxxx, r4.xyzx
mad r2.xzw, r4.xxyz, r2.xxxx, r3.xxyz
max r0.w, r2.z, r2.x
max r0.w, r2.w, r0.w
add_sat r0.w, r0.w, l(-1.000000)
add r0.w, -r0.w, l(1.000000)
mad r2.xzw, r3.xxyz, r0.wwww, r5.xxyz
max r0.w, r2.z, r2.x
max r0.w, r2.w, r0.w
max r0.w, r0.w, l(1.000000)
div r2.xzw, r2.xxzw, r0.wwww
mul_sat r3.xyz, r2.xzwx, l(4.000000, 4.000000, 4.000000, 0.000000)
add_sat r2.xzw, r2.xxzw, l(-0.250000, 0.000000, -0.250000, -0.250000)
mad r2.xzw, cb7[r1.w + 9].xxyz, r3.xxyz, r2.xxzw
add r2.xzw, r2.xxzw, -cb0[13].xxyz
mad r2.xzw, r2.yyyy, r2.xxzw, cb0[13].xxyz
add r0.w, l(1.000000), -cb0[13].w
mad r0.w, r2.y, r0.w, cb0[13].w
mul r2.xyz, r2.xzwx, cb13[1].wwww
mul r2.xyz, r2.xyzx, cb13[1].xxxx
dp3 r1.x, -r1.xyzx, -r1.xyzx
sqrt r1.x, r1.x
mul r1.x, r1.x, l(0.015625)
min r1.x, r1.x, l(1.000000)
sqrt r0.z, r1.x
sample_l_indexable(texture3d)(float,float,float,float) r0.z, r0.xyzx, t21.yzxw, s5, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t20.wxyz, s5, l(0.000000)
add r0.x, r0.x, l(-1.000000)
mad r0.x, r0.z, r0.x, l(1.000000)
mul r1.xyz, r2.xyzx, cb8[7].xyzx
mul r0.x, r0.x, r0.w
mul o0.xyz, r0.xxxx, r1.xyzx
mov o0.w, l(0)
ret
// Approximately 0 instruction slots used

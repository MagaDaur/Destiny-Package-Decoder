//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jun 29 22:53:56 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyz
// TEXCOORD                 2   xyz         2     NONE   float   xyz
// TEXCOORD                 3   xyzw        3     NONE   float   xy
// TEXCOORD                 4   xyz         4     NONE   float
// SV_POSITION              0   xyzw        5      POS   float
// SV_isFrontFace           0   x           6    FFACE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[10], immediateIndexed
dcl_constantbuffer cb7[36], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t7
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xy
dcl_input_ps_sgv v6.x, is_front_face
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 9
mad r0.xy, v3.xyxx, cb0[8].xyxx, cb0[8].zwzz
mad r0.xy, r0.xyxx, cb7[4].xyxx, cb7[4].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t7.zxyw, s1
add_sat r0.x, r0.x, cb7[5].z
mov_sat r0.yz, cb7[29].yywy
mov_sat r1.xy, cb7[30].yzyy
mov_sat r0.w, cb7[35].w
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v3.xyxx, t0.xyzw, s2
sample_indexable(texture2d)(float,float,float,float) r1.zw, v3.xyxx, t1.zwxy, s3
mad r1.zw, r1.zzzw, cb0[9].xxxx, cb0[9].yyyy
sample_indexable(texture2d)(float,float,float,float) r3.xyz, v3.xyxx, t2.xzwy, s4
ge r2.w, r3.z, l(0.156862751)
and r3.w, r2.w, l(0x3f800000)
add r4.x, r3.z, l(-0.188235298)
mul_sat r4.x, r4.x, l(1.231884)
mul_sat r5.yz, r3.yyzy, l(0.000000, 7.968750, 7.968750, 0.000000)
movc r3.y, v6.x, l(1.000000), l(-1.000000)
mad_sat r3.z, cb7[33].y, r4.x, cb7[33].x
mad_sat r3.z, cb7[33].w, r3.z, cb7[33].z
mov_sat r4.x, cb0[2].x
mul r5.x, r4.x, l(-2.000000)
add r4.y, l(128.500000), cb0[3].x
mul r4.y, r4.y, l(0.00390625000)
ge r4.z, l(0.050000), r5.z
movc r4.y, r4.z, r4.y, l(-1.000000)
mad_sat r4.z, cb7[31].y, r5.x, cb7[31].x
mad_sat r4.z, cb7[31].w, r4.z, cb7[31].z
mul_sat r6.xyz, r2.xyzx, l(4.000000, 4.000000, 4.000000, 0.000000)
add_sat r7.xyz, r2.xyzx, l(-0.250000, -0.250000, -0.250000, 0.000000)
mad_sat r8.xyz, cb7[27].xyzx, r6.xyzx, r7.xyzx
add r0.x, r0.x, l(-1.000000)
mul r0.x, r0.x, r0.y
mad_sat r6.xyz, cb7[32].xyzx, r6.xyzx, r7.xyzx
add r7.xyz, -r6.xyzx, r8.xyzx
mad r6.xyz, r3.zzzz, r7.xyzx, r6.xyzx
mad r0.y, -r4.x, l(-2.000000), r4.z
mad r0.y, r3.z, r0.y, r5.x
add r4.x, -r0.w, r0.z
mad r7.y, r3.z, r4.x, r0.w
mad r0.x, r3.z, r0.x, l(1.000000)
mul r0.y, r0.y, cb0[7].x
add r0.w, l(128.500000), cb7[30].x
mul r0.w, r0.w, l(0.00390625000)
ge r0.z, l(0.050000), r0.z
movc r0.z, r0.z, r0.w, l(-1.000000)
min r0.x, r0.x, r0.y
lt r0.y, l(0.000100), r1.x
mul r0.w, r1.x, l(-2.000000)
mad r1.x, r1.x, l(-2.000000), l(-0.200000)
mul r1.x, r0.x, r1.x
mad r0.w, r1.x, l(-5.002501), r0.w
min r0.w, r0.w, r0.x
movc r7.x, r0.y, r0.w, r0.x
mad r0.xyw, r6.xyxz, cb0[6].xyxz, -r2.xyxz
mad o0.xyz, r3.wwww, r0.xywx, r2.xyzx
mad r0.xy, r3.zzzz, r1.zwzz, -r1.zwzz
mad r2.xy, r3.wwww, r0.xyxx, r1.zwzz
add r0.xy, -r5.xzxx, r7.xyxx
mad r0.xy, r3.wwww, r0.xyxx, r5.xzxx
mul r0.w, r1.y, r3.w
movc o0.w, r2.w, r0.z, r4.y
dp2 r0.z, r2.xyxx, r2.xyxx
add r0.z, -r0.z, l(1.000000)
max r0.z, r0.z, l(0.000000)
sqrt r2.z, r0.z
dp3 r0.z, r2.xyzx, r2.xyzx
rsq r0.z, r0.z
mul r1.xyz, r0.zzzz, r2.xyzx
mul r2.xyz, r3.yyyy, v0.xyzx
mul r3.yzw, r1.yyyy, v2.xxyz
mad r1.xyw, v1.xyxz, r1.xxxx, r3.yzyw
mad r1.xyz, r2.xyzx, r1.zzzz, r1.xywx
dp3 r0.z, r1.xyzx, r1.xyzx
rsq r0.z, r0.z
mul r1.xyz, r0.zzzz, r1.xyzx
ne r0.z, l(0.000000), cb0[5].x
if_nz r0.z
  deriv_rtx_coarse r2.xy, v3.xyxx
  dp2 r0.z, r2.xyxx, r2.xyxx
  sqrt r0.z, r0.z
  deriv_rty_coarse r2.xy, v3.xyxx
  dp2 r1.w, r2.xyxx, r2.xyxx
  sqrt r1.w, r1.w
  max r0.z, r0.z, r1.w
  div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
  log r0.z, r0.z
  round_ni r1.w, r0.z
  exp r1.w, r1.w
  round_pi r2.x, r0.z
  exp r2.x, r2.x
  mul r2.yz, r1.wwww, v3.xxyx
  round_ni r2.yz, r2.yyzy
  dp2 r1.w, r2.yzyy, l(17.000000, 0.100000, 0.000000, 0.000000)
  sincos r1.w, null, r1.w
  mul r1.w, r1.w, l(10000.000000)
  mad r2.y, r2.z, l(13.000000), r2.y
  sincos r2.y, null, r2.y
  add r2.y, |r2.y|, l(0.100000)
  mul r1.w, r1.w, r2.y
  frc r1.w, r1.w
  mul r2.xy, r2.xxxx, v3.xyxx
  round_ni r2.xy, r2.xyxx
  dp2 r2.z, r2.xyxx, l(17.000000, 0.100000, 0.000000, 0.000000)
  sincos r2.z, null, r2.z
  mul r2.z, r2.z, l(10000.000000)
  mad r2.x, r2.y, l(13.000000), r2.x
  sincos r2.x, null, r2.x
  add r2.x, |r2.x|, l(0.100000)
  mul r2.x, r2.x, r2.z
  frc r2.x, r2.x
  frc r0.z, r0.z
  add r2.x, -r1.w, r2.x
  mad r1.w, r0.z, r2.x, r1.w
  add r2.x, -r0.z, l(1.000000)
  min r0.z, r0.z, r2.x
  mul r2.x, r1.w, r1.w
  add r2.y, r0.z, r0.z
  add r2.z, -r0.z, l(1.000000)
  mul r2.y, r2.z, r2.y
  mad r2.w, -r0.z, l(0.500000), r1.w
  div r2.xw, r2.xxxw, r2.yyyz
  add r3.y, -r1.w, l(1.000000)
  mul r3.y, r3.y, r3.y
  div r2.y, r3.y, r2.y
  add r2.y, -r2.y, l(1.000000)
  lt r2.z, r1.w, r2.z
  lt r0.z, r1.w, r0.z
  movc r0.z, r0.z, r2.x, r2.w
  movc r0.z, r2.z, r0.z, r2.y
  ge r1.w, l(0.500000), cb0[4].x
  add r2.x, cb0[4].x, cb0[4].x
  mad r2.x, r0.z, -r2.x, r2.x
  mad r2.y, cb0[4].x, l(2.000000), l(-2.000000)
  mad r0.z, r0.z, r2.y, l(1.000000)
  movc r0.z, r1.w, r2.x, r0.z
else
  mov r0.z, cb0[4].x
endif
add r0.z, -r0.z, r5.y
lt r0.z, r0.z, l(0.000000)
discard_nz r0.z
mad r0.x, r0.x, l(0.125000), l(0.375000)
mad_sat o1.xyz, r1.xyzx, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)
mov_sat r3.x, r3.x
mul o2.y, r3.x, l(0.500000)
mul o2.z, r0.w, l(0.800000)
mov o1.w, l(0)
mov o2.x, r0.y
mov o2.w, v0.w
ret
// Approximately 0 instruction slots used

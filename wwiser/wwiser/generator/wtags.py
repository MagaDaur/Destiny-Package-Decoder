import logging, os


VALID_EXTENSIONS = ['.wem', ".wav", ".lwav", ".xma", ".ogg", ".logg"]

# !tags.m3u helper

#******************************************************************************

class Tags(object):
    def __init__(self, banks, names=None):
        self._banks = banks
        self._names = names
        self._txtpcache = None

        self.make_event = False
        self.make_wem = False
        self.shortevent = False
        self.add = False
        self.limit = None

        self._tag_names = {}

    #--------------------------------------------------------------------------

    def add_tag_names(self, shortname, longname):
        self._tag_names[shortname] = longname

    def set_txtpcache(self, txtpcache):
        self._txtpcache = txtpcache

    def set_make_event(self, flag):
        self.make_event = flag
        self.shortevent = flag

    def set_make_wem(self, flag):
        self.make_wem = flag

    def set_add(self, flag):
        self.add = flag

    def set_limit(self, value):
        self.limit = value

    def get_limit(self):
        return self._limit

    #--------------------------------------------------------------------------
  

    def make(self):
        try:
            self._write_event()
            self._write_wem()

        except Exception: # as e
            logging.warn("tags: PROCESS ERROR! (report)")
            logging.exception("")
            raise
        return


    def _write_event(self):
        if not self.make_event:
            return
        if not self._txtpcache:
            return
        #if not self._banks:
        #    return

        logging.info("tags: start events")

        basepath = self._get_basepath()

        tags = self._tag_names
        if not tags:
            return
        files = list(tags.keys())
        files.sort()
        if not files:
            return

        outdir = self._txtpcache.outdir
        if outdir:
            outdir = os.path.join(basepath, outdir)
            os.makedirs(outdir, exist_ok=True)

        outname = os.path.join(outdir, "!tags.m3u")
        
        mode = 'w'
        if self.add and os.path.exists(outname):
            mode = 'a'

        with open(outname, mode, newline="\r\n") as outfile:
            if not mode == 'a':
                outfile.write("## @ALBUM    \n")
                outfile.write("## $AUTOALBUM\n")
                outfile.write("## $AUTOTRACK\n")
                outfile.write("# AUTOGENERATED BY WWISER\n")
                outfile.write("\n")

            for file in files:
                longname = tags[file]

                outfile.write("# %%TITLE    %s\n" %(longname))
                outfile.write('%s\n' % (file))

        return

    def _get_files(self, basepath):
        out = []
        files = os.listdir(basepath)
        for file in files:
            basename = os.path.basename(file)
            name_ext = os.path.splitext(basename)
            name = name_ext[0]
            ext = name_ext[1]

            if ext not in VALID_EXTENSIONS:
                continue
            if not name.isnumeric():
                continue

            id = int(name)

            out.append((file, id))

        return out

    def _write_wem(self):
        if not self.make_wem:
            return
        if not self._names:
            return

        logging.info("tags: start wems")

        # try in current dir
        basepath = self._get_basepath()
        files = self._get_files(basepath)

        if len(files) == 0 and self._txtpcache:
            # try in wem dir
            basepath = os.path.join(basepath, self._txtpcache.outdir)
            basepath = os.path.join(basepath, self._txtpcache.wemdir)
            if os.path.isdir(basepath):
                files = self._get_files(basepath)

        if len(files) == 0:
            logging.info("tags: no wem found")
            return
        files.sort()

        #if basepath:
        #    outdir = os.path.join(basepath, outdir)
        #    os.makedirs(outdir, exist_ok=True)

        outname = os.path.join(basepath, "!tags.m3u")

        mode = 'w'
        if self.add and os.path.exists(outname):
            mode = 'a'

        with open(outname, mode, newline="\r\n") as outfile:
            if not mode == 'a':
                outfile.write("## @ALBUM    \n")
                outfile.write("## $AUTOALBUM\n")
                outfile.write("## $AUTOTRACK\n")
                outfile.write("# AUTOGENERATED BY WWISER\n")
                outfile.write("\n")

            for file, id in files:
                row = self._names.get_namerow(id)
                if row:
                    if row.guidname:
                        outfile.write("# %%TITLE    %s\n" %(row.guidname))
                    if row.path:
                        outfile.write("# %%PATH     %s\n" %(row.path))
                    if row.objpath:
                        outfile.write("# %%OBJPATH  %s\n" %(row.objpath))
                outfile.write('%s\n' % (file))

        logging.info("tags: wrote %s", outname)
        return

    def _get_basepath(self):
        # take first bank as base folder
        if self._banks:
            basepath = self._banks[0].get_root().get_path()
        else:
            basepath = os.getcwd() #self._txtpcache.basedir
        if not basepath:
            basepath = '.'

        return basepath
